<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-09-18T11:54:48+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Seobisback Github Blog</title><subtitle>Tech Blog</subtitle><entry><title type="html">(Deep Dive Study)웹 브라우저에 naver.com URL을 입력하면 어떤 일이 생기나요? + 이론을 통한 렌더링 최적화 고민</title><link href="http://localhost:4000/syntax/2023/09/17/Browser-rendering.html" rel="alternate" type="text/html" title="(Deep Dive Study)웹 브라우저에 naver.com URL을 입력하면 어떤 일이 생기나요? + 이론을 통한 렌더링 최적화 고민" /><published>2023-09-17T00:00:00+09:00</published><updated>2023-09-17T00:00:00+09:00</updated><id>http://localhost:4000/syntax/2023/09/17/Browser-rendering</id><content type="html" xml:base="http://localhost:4000/syntax/2023/09/17/Browser-rendering.html"><![CDATA[<h1 id="-이-토픽에-관해">🌱  이 토픽에 관해</h1>

<p>스터디에서 발표 자료를 준비하기 위해 정리하였으며, 프론트엔드 엔지니어 포지션으로 면접을 보며 많이 받은 질문이다.</p>

<p><strong>“웹 브라우저에 naver.com URL을 입력하면 어떤 일이 생기나요?”</strong></p>

<p>이론상으로 외우며 공부한 부분을 좀 더 깊게 파해쳐서 정리해보기로 했다.</p>

<p>우선적으로, 해당 부분을 깊게 정리하려면 사전에 웹 브라우저가 사이트에 접속할 경우의 동작 순서를 간략하게 정리할 필요가 있다고 생각한다.</p>

<hr />

<h1 id="웹-브라우저와-웹-브라우저의-동작에-관해">🌑 웹 브라우저와 웹 브라우저의 동작에 관해</h1>

<p>우리가 웹 서핑을 위해 익히 사용하는 웹 브라우저는 보통 웹 서버와 통신하고 다양한 사이트 내부의 컨텐츠를 볼 수 있도록 지원하는 소프트웨어이다.</p>

<p><img src="/assets/images/posts/2023-09-17-Browser-rendering/browser01.png" alt="Untitled" /></p>

<p>브라우저는 다양한 종류의 브라우저가 있으며, 해당 브라우저마다 엔진이 다르기 때문에 퍼블리셔와 프론트엔드 엔지니어는 Cross Browsing에 유의하며 자바스크립트와 CSS를 작성해야 한다.</p>

<p><img src="/assets/images/posts/2023-09-17-Browser-rendering/browser02.png" alt="Untitled" /></p>

<p>출처 : <a href="http://mozilla.org">mozilla.org</a> (MDN web docs)</p>

<hr />

<h1 id="-그럼-웹-브라우저는-어떻게-동작해--웹-브라우저의-동작-순서">🌒 그럼 웹 브라우저는 어떻게 동작해 ? (웹 브라우저의 동작 순서)</h1>

<h2 id="동작-순서와-토픽-정리">동작 순서와 토픽 정리</h2>

<ol>
  <li>사용자가 웹 브라우저 주소창에 URL을 입력하면, 웹 브라우저는 <strong>DNS</strong>에게 해당 호스트의 IP주소를 묻게 된다.
    <ol>
      <li>일반 사용자는 <strong><code class="language-plaintext highlighter-rouge">naver.com</code></strong>과 같은 Domain Name을 통해 정보에 엑세스하게 되는데, 웹 브라우저는 인터넷 프로토콜(IP) 주소를 통해 상호작용 하므로 DNS는 브라우저가 인터넷 자원을 로드할 수 있도록 도메인 이름을 IP주소로 변환하는 작업을 행해준다.</li>
      <li>DNS(Domain Name System) : IP 주소 및 기타 데이터를 저장하고 이름별로 쿼리할 수 있게 해주는 분산 데이터베이스이다. 쉽게 표현하면 인터넷 상의 전화번호부와 같다.</li>
    </ol>
  </li>
  <li>브라우저는 해당 호스트의 IP주소로 서버를 찾아간다. 이때 브라우저는 번호표 역할을 하는 ISN(Random Sequence)를 가지고 간다.
    <ol>
      <li>ISN (Random Sequence) : TCP 기반 데이터 통신에서 각각의 새 연결에 할당된 고유한 32비트 시퀀스 번호를 나타낸다. TCP 연결을 통해 전송되는 다른 데이터 바이트와 충돌하지 않는 시퀀스 번호를 할당하는데 도움이 된다. ( 통신마다 충돌이 일어나지 않기 위한 목적 )</li>
    </ol>
  </li>
  <li>서버는 ISN(Random Sequence)를 가지고 1을 더한 후 다시 브라우저에게 주고, 브라우저는 서버에게 응답받은 ISN(Random Sequence)에 다시 한 번 1을 더해 서버에 보내며 데이터를 주고 받기 위한 3 Way-Handshake 를 완료한다.
    <ol>
      <li>3 Way-Handshake : 3개의 단계를 기반으로 TCP의 연결을 성립하는 것
        <ol>
          <li>
            <p>(그림) 3 Way-Handshake 연결 성립 단계</p>

            <p><img src="/assets/images/posts/2023-09-17-Browser-rendering/browser03.png" alt="Untitled" /></p>

            <ol>
              <li>SYN(synchronization) : 연결 요청 플래그</li>
              <li>ACK(acknowledgement) : 응답 플래그</li>
            </ol>
          </li>
          <li>
            <p>(그림) Wireshark 패킷 분석 도구에서 요청의 Sequence Number를 조회</p>

            <p><img src="/assets/images/posts/2023-09-17-Browser-rendering/browser04.png" alt="Untitled" /></p>
          </li>
          <li>SYN 단계 : 클라이언트는 서버에 클라이언트의 ISN(Random Sequence)을 담아 SYN을 보낸다.</li>
          <li>SYN + ACK 단계 : 서버는 클라이언트의 SYN을 수신하고 서버의 ISN을 보내며 승인번호로 클라이언트의 ISN + 1을 보낸다.</li>
          <li>ACK 단계 : 클라이언트는 서버의 ISN + 1한 값인 승인번호를 담아 ACK를 서버에 보낸다.</li>
        </ol>
      </li>
    </ol>
  </li>
  <li>3 Way-Handshake 과정이 끝난 이후 브라우저는 서버에게 데이터를 요청한다. (HTTP Request)</li>
  <li>서버는 브라우저에게 받은 요청에 응답하여 데이터를 보낸다. (HTTP Response)</li>
</ol>

<h3 id="construction---가져온-html-css를-parsing하고-합쳐진-하나의-tree를-생성하는-단계"><strong>Construction</strong> - 가져온 HTML, CSS를 Parsing하고 합쳐진 하나의 Tree를 생성하는 단계</h3>

<ol>
  <li>서버로 부터 받은 데이터를 출력하기 위해 해당 데이터를 W3C 명세에 따라 해석한다. (Parsing)
    <ol>
      <li>W3C (World Wide Web Consortium) : 웹의 창시자 팀 버너스리를 중심으로 설립된 웹 표준화 기구, 웹에서 사용되는 HTML, SOAP, XML 등의 표준을 개발한다.</li>
    </ol>
  </li>
  <li>브라우저의 렌더링 엔진은 HTML을 Parsing해서 DOM Tree를 생성한다.
    <ol>
      <li>
        <p>(그림) DOM Tree &amp; CSSOM Tree &amp; Render Tree</p>

        <p><img src="/assets/images/posts/2023-09-17-Browser-rendering/browser05.png" alt="Untitled" /></p>
      </li>
      <li>
        <p>DOM Tree(Document Object Model Tree) : HTML 문서를 태그나 속성의 계층 구조(트리 구조)로 간주하여 참조하는 개념, 웹 문서를 node 구조의 tree 형태로 표시한다. 웹 브라우저는 DOM을 사용하기 때문에 자바스크립트와 CSS를 사용해서 상호작용이 가능하다.</p>
      </li>
    </ol>
  </li>
  <li>HTML을 Parsing하는 과정에서 렌더링 엔진이 스타일 태그(style)를 만난다면 HTML Parsing 작업을 중지하고, CSS Parsing 작업을 시작하여 CSSOM Tree를 생성한다.
    <ol>
      <li>CSSOM Tree(CSS Object Model Tree) : HTML 문서를 DOM Tree로 만든 것처럼, CSS도 브라우저가 이해하고 처리할 수 있도록 변환해서 만든 계층 구조</li>
    </ol>
  </li>
  <li>CSS Parsing을 종료하고 HTML Parsing이 중단된 지점부터 다시 Parsing을 진행한다. 그러다가 스크립트 태그(script)를 만나면 다시 HTML Parsing을 중단하고 자바스크립트 엔진에게 제어 권한을 넘긴다.</li>
  <li>자바스크립트 엔진은 코드를 해석하여 AST를 생성한 후 실행한다.
    <ol>
      <li>
        <p>(그림) 자바스크립트 코드와 해당 코드를 바탕으로 생성된 AST</p>

        <p><img src="/assets/images/posts/2023-09-17-Browser-rendering/browser06.png" alt="Untitled" /></p>
      </li>
      <li>
        <p>AST(Abstract Syntax Tree) 추상 구문 트리 : 각 노드는 소스코드에서 발생되는 구조를 나타내고, 소스코드를 문법에 맞게 노드로 쪼개서 만든 트리이다. 추상적이라는 의미는 실제 구문에서 나타나는 세세한 정보를 나타내지 않는다는 것을 의미한다.</p>
      </li>
    </ol>
  </li>
  <li>다음으로 중단되었던 HTML Parsing 작업을 완료한다.</li>
  <li>
    <p>앞서 만든 DOM Tree와 CSSOM Tree를 합쳐서 Render Tree를 생성한다.</p>

    <p><img src="/assets/images/posts/2023-09-17-Browser-rendering/browser07.png" alt="Untitled" /></p>
  </li>
</ol>

<h3 id="operation---시각화-단계-layout-paint-composition"><strong>Operation - 시각화 단계 (layout, paint, composition)</strong></h3>

<ol>
  <li>이후 렌더링 엔진은 Layout 작업을 시작하는데 이 작업은 Render Tree의 노드들을 화면의 올바른 위치에 표시하는 것을 의미한다. (layout)</li>
  <li>UI Backend가 Render Tree의 노드들을 돌면서 UI를 그린다. (paint)</li>
  <li>노드들의 레이어를 순서대로 구성한다. z-index가 낮은 요소를 먼저 놓고, 그 다음 높은 요소를 놓는다. (composition)
    <ol>
      <li>z-index : CSS 스타일 코드 중, 창을 순서대로 배치하는 스타일</li>
    </ol>
  </li>
</ol>

<blockquote>
  <p>“Better UX” 좀 더 나은 사용자 경험</p>

  <p>이러한 Parsing과 배치(Layout), UI를 paint 하는 과정은 브라우저가 사용자에게 더 빠르게 화면을 출력해주기 위해 서버로부터 데이터의 일부를 받고 나서 화면에 표시하고 또 데이터를 받게 되면 화면에 표시하는 것을 반복한다.</p>

  <p>이 때문에 웹 페이지의 화면은 한 번에 렌더링 되지 않고, 부분적으로 렌더링 되는 현상이 나타나는 것이다.</p>
</blockquote>

<ol>
  <li>최종적으로 웹의 사용자에게 결과 화면을 출력한다.</li>
</ol>

<hr />

<h1 id="이론을-통한-렌더링-최적화-">이론을 통한 렌더링 최적화 🧐</h1>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="p">=</span><span class="s">"script.js"</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>여담으로 script 태그를 head가 아닌 body의 끝에 삽입하거나 defer 옵션을 사용하라는 말을 한 번쯤은 들어봤을 것이다.</p>

<p>NHN Cloud 에서 발표한 ‘[2018] 프런트엔드 성능 최적화’ 라는 영상이 있는데,</p>

<p>script 태그의 삽입 위치를 통해서도 렌더링 최적화를 경험할 수 있는 부분이다.</p>

<p><img src="/assets/images/posts/2023-09-17-Browser-rendering/browser08.png" alt="Untitled" /></p>

<p>자료 URL : https://www.youtube.com/watch?v=G1IWq2blu8c&amp;t=970s</p>

<p>이 부분은 브라우저 렌더링 과정을 살펴보면 이해할 수 있는 부분인데,</p>

<p>결론부터 말하면 HTML을 Parsing하는 과정에서 script 태그를 만나 parsing을 중단하고 AST를 생성하고 실행하는 과정이 있기 때문에 스크립트 삽입 위치에 따라 렌더링 시간이 달라진다는 것이다.</p>

<h2 id="head-에-스크립트를-배치할-경우">head 에 스크립트를 배치할 경우</h2>

<p>head에 스크립트를 포함할 경우 parsing을 멈추고, JS 파일을 받아오고 실행한 뒤 다시 HTML을 parsing 하는 과정을 진행할텐데..</p>

<p>Javascript 크기가 클 경우 렌더링이 너무 오래걸려서 사용자가 페이지를 보기까지 많은 시간이 소요될 것이다..</p>

<p>그러므로 head 태그 안에 스크립트 파일을 배치하는 것은 좋은 방법이라고 볼 수 없다.</p>

<h2 id="body-에-스크립트를-배치할-경우">body 에 스크립트를 배치할 경우</h2>

<p>body 하단에 스크립트를 배치할 경우 HTML parsing을 먼저 진행하고 JS파일을 받아와 실행하게 된다.</p>

<p>body에 삽입할 경우 화면 렌더링에 head 보다 좀 더 효과적일 수 있으나, Javascript가 포함된 콘텐츠를 보기 위해서는 오래 걸릴 것이다.</p>

<h2 id="async-속성-사용">async 속성 사용</h2>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nt">script</span> <span class="na">async</span> <span class="na">src</span><span class="p">=</span><span class="s">"script.js"</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>async 속성은 head태그 안에 스크립트 태그를 배치하고 async 속성과 함께 사용하게 된다.</p>

<p>async 속성은 파싱과 Javascript 불러오기를 병렬적으로 진행하기 때문에 기존 방법들보다는 다운로드 시간이 절약되어 효율적이긴 하지만, 결국 JS를 실행하는 단계에서 HTML Parsing이 중단되기 때문에 의존성이 있는 페이지라면 문제가 될 수 있으므로 유의해서 사용해야 하는 속성이다.</p>

<hr />

<h2 id="defer-속성-사용">defer 속성 사용</h2>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nt">script</span> <span class="na">defer</span> <span class="na">src</span><span class="p">=</span><span class="s">"script.js"</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>defer 속성은 async 속성과 마찬가지로 head에 스크립트 태그를 배치하고 defer 속성과 함께 사용하게 된다.</p>

<p>병렬적으로 파싱과 Javascript 불러오기를 진행하게 되고, 파싱이 모두 끝나면 Javascript를 실행한다.</p>

<p>병렬적으로 진행되기 때문에 다운로드 시간도 절약되고 async 속성과 다르게 파싱하는 도중에 Javscript 파일을 모두 다운 받고, 파싱이 끝난 후 순서대로 파일을 실행하기 때문에 원하는 방향대로 스크립트를 실행할 수 있다.</p>

<p>결론적으로 외부 스크립트를 다운받아 불러와야할 경우에는 defer 속성을 사용하는 것이 최선이라고 생각할 수 있다.</p>]]></content><author><name>Seobisback</name></author><category term="Syntax" /><category term="Javascript" /><category term="Browser" /><category term="Rendering" /><summary type="html"><![CDATA[🌱  이 토픽에 관해]]></summary></entry><entry><title type="html">Javascript Test - Jest</title><link href="http://localhost:4000/syntax/2023/09/13/Test-jest-learn.html" rel="alternate" type="text/html" title="Javascript Test - Jest" /><published>2023-09-13T00:00:00+09:00</published><updated>2023-09-13T00:00:00+09:00</updated><id>http://localhost:4000/syntax/2023/09/13/Test-jest-learn</id><content type="html" xml:base="http://localhost:4000/syntax/2023/09/13/Test-jest-learn.html"><![CDATA[<h1 id="jest-란">Jest 란?</h1>

<ul>
  <li>Facebook에서 만든 테스트 도구이다.</li>
  <li>zero config 철학을 가지고 있기 때문에 별도의 설정 없이 빠르게 Test Case를 작성할 수 있다.</li>
</ul>

<h2 id="test를-위한-프로젝트-세팅-및-설치">Test를 위한 프로젝트 세팅 및 설치</h2>

<ul>
  <li>나는 github/jest_tutorial 이라는 폴더에 프로젝트를 세팅했다.</li>
  <li>package.json 세팅을 위해 npm init을 사용하고 jest를 설치한다.</li>
  <li>jest는 테스트 도구로써 개발에서만 사용할 것이기 때문에 ‘devDependencies’ 에 추가한다.</li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">init</span>

<span class="nx">npm</span> <span class="nx">install</span> <span class="nx">jest</span> <span class="o">--</span><span class="nx">save</span><span class="o">-</span><span class="nx">dev</span>
</code></pre></div></div>

<h2 id="packagejson">package.json</h2>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
  <span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">jest_tutorial</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">version</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">1.0.0</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">description</span><span class="dl">"</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">main</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">index.js</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">scripts</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">test</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">jest</span><span class="dl">"</span>
  <span class="p">},</span>
  <span class="dl">"</span><span class="s2">author</span><span class="dl">"</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">license</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">ISC</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">devDependencies</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">jest</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^29.7.0</span><span class="dl">"</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p>테스트 케이스를 작성할 파일의 경우 ‘test.js’로 끝나거나, ‘<strong>tests</strong>’ 폴더에 있는 파일들은 자동으로 인식한다. 만약 직접 선택한 파일만 test하고 싶다면 npm test 뒤에 파일 명 혹은 경로를 입력하면 된다.</p>

</blockquote>

<h2 id="함수를-모아두고-테스트하기-위한-파일">함수를 모아두고 테스트하기 위한 파일</h2>

<h3 id="fnjs">fn.js</h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">fn</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">add</span> <span class="p">:</span> <span class="p">(</span><span class="nx">num1</span><span class="p">,</span> <span class="nx">num2</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">num1</span> <span class="o">+</span> <span class="nx">num2</span><span class="p">,</span>
    <span class="na">makeUser</span> <span class="p">:</span> <span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span><span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">,</span> <span class="na">gender</span> <span class="p">:</span> <span class="kc">undefined</span><span class="p">}),</span>
    <span class="na">throwErr</span> <span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">xx</span><span class="dl">"</span><span class="p">);</span>
    <span class="p">},</span>
    <span class="na">getName</span><span class="p">:</span> <span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Mike</span><span class="dl">"</span><span class="p">;</span>

        <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="nf">callback</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>
        <span class="p">},</span> <span class="mi">3000</span><span class="p">);</span>
    <span class="p">},</span>
    <span class="na">getAge</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">age</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>

        <span class="k">return</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">((</span><span class="nx">res</span><span class="p">,</span> <span class="nx">rej</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="nf">res</span><span class="p">(</span><span class="nx">age</span><span class="p">)},</span> <span class="mi">3000</span><span class="p">);</span>
        <span class="p">})</span>
    <span class="p">},</span>
    <span class="na">getAgeError</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">age</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>

        <span class="k">return</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">((</span><span class="nx">res</span><span class="p">,</span> <span class="nx">rej</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="nf">rej</span><span class="p">(</span><span class="dl">'</span><span class="s1">error</span><span class="dl">'</span><span class="p">)</span>
            <span class="p">},</span> <span class="mi">3000</span><span class="p">)</span>
        <span class="p">})</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">fn</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="만들어둔-함수를-테스트-하기-위한-파일">만들어둔 함수를 테스트 하기 위한 파일</h2>

<h3 id="fntestjs">fn.test.js</h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">fn</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./fn</span><span class="dl">'</span><span class="p">);</span>

<span class="nf">test</span><span class="p">(</span><span class="dl">'</span><span class="s1">1은 1이다.</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">//expect : 검증할 값</span>
    <span class="c1">//toBe : 기대 값</span>
    <span class="nf">expect</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nf">toBe</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="p">})</span>

<span class="nf">test</span><span class="p">(</span><span class="dl">'</span><span class="s1">2 더하기 3은 5다.</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">expect</span><span class="p">(</span><span class="nx">fn</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)).</span><span class="nf">toBe</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
<span class="p">});</span>

<span class="nf">test</span><span class="p">(</span><span class="dl">'</span><span class="s1">2 더하기 3은 5다.</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">expect</span><span class="p">(</span><span class="nx">fn</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)).</span><span class="nf">toEqual</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
<span class="p">});</span>

<span class="nf">test</span><span class="p">(</span><span class="dl">'</span><span class="s1">3 더하기 3은 5가 아니다.</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">expect</span><span class="p">(</span><span class="nx">fn</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">)).</span><span class="nx">not</span><span class="p">.</span><span class="nf">toBe</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
<span class="p">})</span>

<span class="c1">// (1) 객체나 배열은 재귀적으로 돌면서 값을 확인해야 하기 때문에 toEqual을 사용해야한다.</span>
<span class="c1">// 보다 엄격하게 검사하려면 toStrictEqual을 사용하는게 좋다.</span>
<span class="nf">test</span><span class="p">(</span><span class="dl">'</span><span class="s1">이름과 나이를 전달받아서 객체를 반환해줘</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">expect</span><span class="p">(</span><span class="nx">fn</span><span class="p">.</span><span class="nf">makeUser</span><span class="p">(</span><span class="dl">'</span><span class="s1">Mike</span><span class="dl">'</span><span class="p">,</span> <span class="mi">30</span><span class="p">)).</span><span class="nf">toEqual</span><span class="p">(</span>
        <span class="p">{</span>
            <span class="na">name</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">Mike</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">age</span> <span class="p">:</span> <span class="mi">30</span><span class="p">,</span>
        <span class="p">}</span>
    <span class="p">);</span>
<span class="p">})</span>

<span class="c1">// (2) 객체나 배열은 재귀적으로 돌면서 값을 확인해야 하기 때문에 toEqual을 사용해야한다.</span>
<span class="c1">// 보다 엄격하게 검사하려면 toStrictEqual을 사용하는게 좋다.</span>
<span class="nf">test</span><span class="p">(</span><span class="dl">'</span><span class="s1">이름과 나이를 전달받아서 객체를 반환해줘</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    
    <span class="nf">expect</span><span class="p">(</span><span class="nx">fn</span><span class="p">.</span><span class="nf">makeUser</span><span class="p">(</span><span class="dl">'</span><span class="s1">Mike</span><span class="dl">'</span><span class="p">,</span> <span class="mi">30</span><span class="p">)).</span><span class="nf">toStrictEqual</span><span class="p">(</span>
        <span class="p">{</span>
            <span class="na">name</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">Mike</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">age</span> <span class="p">:</span> <span class="mi">30</span><span class="p">,</span>
        <span class="p">}</span>
    <span class="p">);</span>
<span class="p">})</span>

<span class="nf">test</span><span class="p">(</span><span class="dl">"</span><span class="s2">null은 null이다.</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">expect</span><span class="p">(</span><span class="kc">null</span><span class="p">).</span><span class="nf">toBeNull</span><span class="p">();</span>
<span class="p">})</span>

<span class="nf">test</span><span class="p">(</span><span class="dl">"</span><span class="s2">0은 false 이다.</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">expect</span><span class="p">(</span><span class="nx">fn</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)).</span><span class="nf">toBeFalsy</span><span class="p">();</span>
<span class="p">})</span>

<span class="nf">test</span><span class="p">(</span><span class="dl">"</span><span class="s2">0은 false 이다.</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">expect</span><span class="p">(</span><span class="nx">fn</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">world</span><span class="dl">"</span><span class="p">)).</span><span class="nf">toBeFalsy</span><span class="p">();</span>
<span class="p">})</span>

<span class="nf">test</span><span class="p">(</span><span class="dl">"</span><span class="s2">비어있지 않은 문자열은 true 이다.</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">expect</span><span class="p">(</span><span class="nx">fn</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">world</span><span class="dl">"</span><span class="p">)).</span><span class="nf">toBeTruthy</span><span class="p">();</span>
<span class="p">})</span>

<span class="nf">test</span><span class="p">(</span><span class="dl">"</span><span class="s2">ID는 10자 이하여야 한다.</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">id</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">THE_BLACK</span><span class="dl">"</span><span class="p">;</span>
    <span class="nf">expect</span><span class="p">(</span><span class="nx">id</span><span class="p">.</span><span class="nx">length</span><span class="p">).</span><span class="nf">toBeLessThanOrEqual</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
<span class="p">})</span>

<span class="nf">test</span><span class="p">(</span><span class="dl">"</span><span class="s2">비밀번호는 4자리여야 한다.</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">password</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">3414</span><span class="dl">'</span><span class="p">;</span>
    <span class="nf">expect</span><span class="p">(</span><span class="nx">password</span><span class="p">.</span><span class="nx">length</span><span class="p">).</span><span class="nf">toBe</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
<span class="p">})</span>

<span class="nf">test</span><span class="p">(</span><span class="dl">"</span><span class="s2">비밀번호는 4자리여야 한다.</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">password</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">3414</span><span class="dl">'</span><span class="p">;</span>
    <span class="nf">expect</span><span class="p">(</span><span class="nx">password</span><span class="p">.</span><span class="nx">length</span><span class="p">).</span><span class="nf">toEqual</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
<span class="p">})</span>

<span class="c1">// 이진법을 이용한 계산으로 몇몇 프로그래밍 언어들은 소수점을 정확하게 표현하지 못하기 때문에 무한소수로 출력되는 경우가 있다.</span>
<span class="c1">// 그러므로 소수점을 활용한 계산에서는 toBeCloseTo를 사용해서 test하는 것이 적절하다.</span>
<span class="nf">test</span><span class="p">(</span><span class="dl">'</span><span class="s1">0.1 더하기 0.2는 0.3이다.</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">expect</span><span class="p">(</span><span class="nx">fn</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">)).</span><span class="nf">toBeCloseTo</span><span class="p">(</span><span class="mf">0.3</span><span class="p">);</span>
<span class="p">})</span>

<span class="nf">test</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello World 에 a 라는 글자가 있는가 ? </span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">expect</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello World</span><span class="dl">'</span><span class="p">).</span><span class="nf">toMatch</span><span class="p">(</span><span class="sr">/H/i</span><span class="p">);</span>
<span class="p">})</span>

<span class="nf">test</span><span class="p">(</span><span class="dl">"</span><span class="s2">유저 리스트에 Mike가 있는가?</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Mike</span><span class="dl">"</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">userList</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">Tom</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Mike</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Kai</span><span class="dl">"</span><span class="p">];</span>

    <span class="nf">expect</span><span class="p">(</span><span class="nx">userList</span><span class="p">).</span><span class="nf">toContain</span><span class="p">(</span><span class="nx">user</span><span class="p">);</span>
<span class="p">})</span>

<span class="nf">test</span><span class="p">(</span><span class="dl">"</span><span class="s2">에러가 나는가?</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">expect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">fn</span><span class="p">.</span><span class="nf">throwErr</span><span class="p">()).</span><span class="nf">toThrow</span><span class="p">(</span><span class="dl">'</span><span class="s1">xx</span><span class="dl">'</span><span class="p">);</span>
<span class="p">})</span>

<span class="c1">//비동기 함수 테스트를 위해서는 test에 전달되는 callback 함수에 done을 전달해주면 된다.</span>
<span class="c1">//jest는 끝에 코드까지 도달하면 종료되기 때문에 done을 전달하지 않으면 제대로된 테스트가 진행되지 않는다.</span>
<span class="nf">test</span><span class="p">(</span><span class="dl">"</span><span class="s2">3초 후에 받아온 이름은 Mike</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">function</span> <span class="nf">callback</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
        <span class="k">try</span> <span class="p">{</span>
            <span class="nf">expect</span><span class="p">(</span><span class="nx">name</span><span class="p">).</span><span class="nf">toBe</span><span class="p">(</span><span class="dl">"</span><span class="s2">Mike</span><span class="dl">"</span><span class="p">);</span>
            <span class="nf">done</span><span class="p">();</span>
        <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
            <span class="nf">done</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="nx">fn</span><span class="p">.</span><span class="nf">getName</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span>
<span class="p">})</span>

<span class="c1">// Promise 를 테스트 할 경우</span>
<span class="c1">// Promise 를 사용하면 해당 코드를 return 해주어야 한다 그렇지 않으면 코드가 실행되고 바로 종료되므로 제대로된 테스트가 진행되지 않는다.</span>
<span class="c1">// 좀더 간단하게 사용하고 싶다면 Matcher를 사용하면된다 (resolves, rejects)</span>
<span class="nf">test</span><span class="p">(</span><span class="dl">"</span><span class="s2">3초 후에 받아온 나이는 30</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nf">expect</span><span class="p">(</span><span class="nx">fn</span><span class="p">.</span><span class="nf">getAge</span><span class="p">()).</span><span class="nx">resolves</span><span class="p">.</span><span class="nf">toBe</span><span class="p">(</span><span class="mi">30</span><span class="p">);</span>

    <span class="c1">// return fn.getAge().then(age =&gt; {</span>
    <span class="c1">//     expect(age).toBe(30);</span>
    <span class="c1">// })</span>
<span class="p">})</span>

<span class="c1">// Promise에서 reject를 테스트할 경우</span>
<span class="nf">test</span><span class="p">(</span><span class="dl">"</span><span class="s2">3초 후애 에러를 리턴</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nf">expect</span><span class="p">(</span><span class="nx">fn</span><span class="p">.</span><span class="nf">getAgeError</span><span class="p">()).</span><span class="nx">rejects</span><span class="p">.</span><span class="nf">toMatch</span><span class="p">(</span><span class="dl">'</span><span class="s1">error</span><span class="dl">'</span><span class="p">);</span>
<span class="p">})</span>
</code></pre></div></div>

<h2 id="npm-test-결과">npm test 결과</h2>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">➜</span>  <span class="nx">jest_tutorial</span> <span class="nx">npm</span> <span class="nx">test</span>

<span class="o">&gt;</span> <span class="nx">jest_tutorial</span><span class="p">@</span><span class="nd">1</span><span class="p">.</span><span class="mf">0.0</span> <span class="nx">test</span>
<span class="o">&gt;</span> <span class="nx">jest</span>

 <span class="nx">FAIL</span>  <span class="p">.</span><span class="o">/</span><span class="nx">fn</span><span class="p">.</span><span class="nx">test</span><span class="p">.</span><span class="nf">js </span><span class="p">(</span><span class="mf">9.261</span> <span class="nx">s</span><span class="p">)</span>
  <span class="err">✓</span> <span class="mi">1</span><span class="nx">은</span> <span class="mi">1</span><span class="nx">이다</span><span class="p">.</span> <span class="p">(</span><span class="mi">1</span> <span class="nx">ms</span><span class="p">)</span>
  <span class="err">✓</span> <span class="mi">2</span> <span class="nx">더하기</span> <span class="mi">3</span><span class="nx">은</span> <span class="mi">5</span><span class="nx">다</span><span class="p">.</span>
  <span class="err">✓</span> <span class="mi">2</span> <span class="nx">더하기</span> <span class="mi">3</span><span class="nx">은</span> <span class="mi">5</span><span class="nx">다</span><span class="p">.</span> <span class="p">(</span><span class="mi">1</span> <span class="nx">ms</span><span class="p">)</span>
  <span class="err">✓</span> <span class="mi">3</span> <span class="nx">더하기</span> <span class="mi">3</span><span class="nx">은</span> <span class="mi">5</span><span class="nx">가</span> <span class="nx">아니다</span><span class="p">.</span>
  <span class="err">✓</span> <span class="nx">이름과</span> <span class="nx">나이를</span> <span class="nx">전달받아서</span> <span class="nx">객체를</span> <span class="nx">반환해줘</span>
  <span class="err">✕</span> <span class="nx">이름과</span> <span class="nx">나이를</span> <span class="nx">전달받아서</span> <span class="nx">객체를</span> <span class="nf">반환해줘 </span><span class="p">(</span><span class="mi">4</span> <span class="nx">ms</span><span class="p">)</span>
  <span class="err">✓</span> <span class="nx">null은</span> <span class="nx">null이다</span><span class="p">.</span> <span class="p">(</span><span class="mi">1</span> <span class="nx">ms</span><span class="p">)</span>
  <span class="err">✓</span> <span class="mi">0</span><span class="nx">은</span> <span class="kc">false</span> <span class="nx">이다</span><span class="p">.</span>
  <span class="err">✕</span> <span class="mi">0</span><span class="nx">은</span> <span class="kc">false</span> <span class="nx">이다</span><span class="p">.</span>
  <span class="err">✓</span> <span class="nx">비어있지</span> <span class="nx">않은</span> <span class="nx">문자열은</span> <span class="kc">true</span> <span class="nx">이다</span><span class="p">.</span>
  <span class="err">✓</span> <span class="nx">ID는</span> <span class="mi">10</span><span class="nx">자</span> <span class="nx">이하여야</span> <span class="nx">한다</span><span class="p">.</span>
  <span class="err">✓</span> <span class="nx">비밀번호는</span> <span class="mi">4</span><span class="nx">자리여야</span> <span class="nx">한다</span><span class="p">.</span>
  <span class="err">✓</span> <span class="nx">비밀번호는</span> <span class="mi">4</span><span class="nx">자리여야</span> <span class="nx">한다</span><span class="p">.</span>
  <span class="err">✓</span> <span class="mf">0.1</span> <span class="nx">더하기</span> <span class="mf">0.2</span><span class="nx">는</span> <span class="mf">0.3</span><span class="nx">이다</span><span class="p">.</span> <span class="p">(</span><span class="mi">1</span> <span class="nx">ms</span><span class="p">)</span>
  <span class="err">✓</span> <span class="nx">Hello</span> <span class="nx">World</span> <span class="nx">에</span> <span class="nx">a</span> <span class="nx">라는</span> <span class="nx">글자가</span> <span class="nx">있는가</span> <span class="p">?</span>
  <span class="err">✓</span> <span class="nx">유저</span> <span class="nx">리스트에</span> <span class="nx">Mike가</span> <span class="nx">있는가</span><span class="p">?</span>
  <span class="err">✓</span> <span class="nx">에러가</span> <span class="nx">나는가</span><span class="p">?</span> <span class="p">(</span><span class="mi">2</span> <span class="nx">ms</span><span class="p">)</span>
  <span class="err">✓</span> <span class="mi">3</span><span class="nx">초</span> <span class="nx">후에</span> <span class="nx">받아온</span> <span class="nx">이름은</span> <span class="nc">Mike </span><span class="p">(</span><span class="mi">3002</span> <span class="nx">ms</span><span class="p">)</span>
  <span class="err">✓</span> <span class="mi">3</span><span class="nx">초</span> <span class="nx">후에</span> <span class="nx">받아온</span> <span class="nx">나이는</span> <span class="mi">30</span> <span class="p">(</span><span class="mi">3002</span> <span class="nx">ms</span><span class="p">)</span>
  <span class="err">✓</span> <span class="mi">3</span><span class="nx">초</span> <span class="nx">후애</span> <span class="nx">에러를</span> <span class="nf">리턴 </span><span class="p">(</span><span class="mi">3001</span> <span class="nx">ms</span><span class="p">)</span>

  <span class="err">●</span> <span class="nx">이름과</span> <span class="nx">나이를</span> <span class="nx">전달받아서</span> <span class="nx">객체를</span> <span class="nx">반환해줘</span>

    <span class="nf">expect</span><span class="p">(</span><span class="nx">received</span><span class="p">).</span><span class="nf">toStrictEqual</span><span class="p">(</span><span class="nx">expected</span><span class="p">)</span> <span class="c1">// deep equality</span>

    <span class="o">-</span> <span class="nx">Expected</span>  <span class="o">-</span> <span class="mi">0</span>
    <span class="o">+</span> <span class="nx">Received</span>  <span class="o">+</span> <span class="mi">1</span>

      <span class="nb">Object</span> <span class="p">{</span>
        <span class="dl">"</span><span class="s2">age</span><span class="dl">"</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span>
    <span class="o">+</span>   <span class="dl">"</span><span class="s2">gender</span><span class="dl">"</span><span class="p">:</span> <span class="kc">undefined</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Mike</span><span class="dl">"</span><span class="p">,</span>
      <span class="p">}</span>

      <span class="mi">34</span> <span class="o">|</span> <span class="nf">test</span><span class="p">(</span><span class="dl">'</span><span class="s1">이름과 나이를 전달받아서 객체를 반환해줘</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="mi">35</span> <span class="o">|</span>
    <span class="o">&gt;</span> <span class="mi">36</span> <span class="o">|</span>     <span class="nf">expect</span><span class="p">(</span><span class="nx">fn</span><span class="p">.</span><span class="nf">makeUser</span><span class="p">(</span><span class="dl">'</span><span class="s1">Mike</span><span class="dl">'</span><span class="p">,</span> <span class="mi">30</span><span class="p">)).</span><span class="nf">toStrictEqual</span><span class="p">(</span>
         <span class="o">|</span>                                     <span class="o">^</span>
      <span class="mi">37</span> <span class="o">|</span>         <span class="p">{</span>
      <span class="mi">38</span> <span class="o">|</span>             <span class="na">name</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">Mike</span><span class="dl">'</span><span class="p">,</span>
      <span class="mi">39</span> <span class="o">|</span>             <span class="na">age</span> <span class="p">:</span> <span class="mi">30</span><span class="p">,</span>

      <span class="nx">at</span> <span class="nb">Object</span><span class="p">.</span><span class="nf">toStrictEqual </span><span class="p">(</span><span class="nx">fn</span><span class="p">.</span><span class="nx">test</span><span class="p">.</span><span class="na">js</span><span class="p">:</span><span class="mi">36</span><span class="p">:</span><span class="mi">37</span><span class="p">)</span>

  <span class="err">●</span> <span class="mi">0</span><span class="nx">은</span> <span class="kc">false</span> <span class="nx">이다</span><span class="p">.</span>

    <span class="nf">expect</span><span class="p">(</span><span class="nx">received</span><span class="p">).</span><span class="nf">toBeFalsy</span><span class="p">()</span>

    <span class="na">Received</span><span class="p">:</span> <span class="dl">"</span><span class="s2">helloworld</span><span class="dl">"</span>

      <span class="mi">51</span> <span class="o">|</span>
      <span class="mi">52</span> <span class="o">|</span> <span class="nf">test</span><span class="p">(</span><span class="dl">"</span><span class="s2">0은 false 이다.</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="o">&gt;</span> <span class="mi">53</span> <span class="o">|</span>     <span class="nf">expect</span><span class="p">(</span><span class="nx">fn</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">world</span><span class="dl">"</span><span class="p">)).</span><span class="nf">toBeFalsy</span><span class="p">();</span>
         <span class="o">|</span>                                      <span class="o">^</span>
      <span class="mi">54</span> <span class="o">|</span> <span class="p">})</span>
      <span class="mi">55</span> <span class="o">|</span>
      <span class="mi">56</span> <span class="o">|</span> <span class="nf">test</span><span class="p">(</span><span class="dl">"</span><span class="s2">비어있지 않은 문자열은 true 이다.</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>

      <span class="nx">at</span> <span class="nb">Object</span><span class="p">.</span><span class="nf">toBeFalsy </span><span class="p">(</span><span class="nx">fn</span><span class="p">.</span><span class="nx">test</span><span class="p">.</span><span class="na">js</span><span class="p">:</span><span class="mi">53</span><span class="p">:</span><span class="mi">38</span><span class="p">)</span>

<span class="nx">Test</span> <span class="na">Suites</span><span class="p">:</span> <span class="mi">1</span> <span class="nx">failed</span><span class="p">,</span> <span class="mi">1</span> <span class="nx">total</span>
<span class="na">Tests</span><span class="p">:</span>       <span class="mi">2</span> <span class="nx">failed</span><span class="p">,</span> <span class="mi">18</span> <span class="nx">passed</span><span class="p">,</span> <span class="mi">20</span> <span class="nx">total</span>
<span class="na">Snapshots</span><span class="p">:</span>   <span class="mi">0</span> <span class="nx">total</span>
<span class="na">Time</span><span class="p">:</span>        <span class="mf">9.288</span> <span class="nx">s</span>
<span class="nx">Ran</span> <span class="nx">all</span> <span class="nx">test</span> <span class="nx">suites</span><span class="p">.</span>
<span class="err">➜</span>  <span class="nx">jest_tutorial</span>
</code></pre></div></div>

<blockquote>
  <p>Jest에는 다양한 Matcher가 존재하고 Test할 함수나 기능에 따라 유용하게 사용할 수 있기 때문에 공식 Docs를 보면서 필요한 Matcher를 찾아보며 테스트를 진행하면 좋을거 같다.</p>

</blockquote>

<p>Jest Matchers :</p>

<p><a href="https://jestjs.io/docs/using-matchers">Using Matchers · Jest</a></p>]]></content><author><name>Seobisback</name></author><category term="Syntax" /><category term="React" /><category term="Javascript" /><category term="Typescript" /><category term="Test" /><category term="Jest" /><summary type="html"><![CDATA[Jest 란?]]></summary></entry><entry><title type="html">React에서 Skeleton Loading 만들기</title><link href="http://localhost:4000/syntax/2023/07/19/Skeleton-loading.html" rel="alternate" type="text/html" title="React에서 Skeleton Loading 만들기" /><published>2023-07-19T00:00:00+09:00</published><updated>2023-07-19T00:00:00+09:00</updated><id>http://localhost:4000/syntax/2023/07/19/Skeleton-loading</id><content type="html" xml:base="http://localhost:4000/syntax/2023/07/19/Skeleton-loading.html"><![CDATA[<p><img src="/assets/images/posts/2023-07-19-Skeleton-loading/skeleton-loading.gif" alt="ezgif.com-video-to-gif (1).gif" /></p>

<p>진행중인 팀 프로젝트에 여러 컨텐츠가 나오게 되면서</p>

<p>UX적인 부분을 개선하기 위해 디자이너님과 로딩에 대해서 고민을 하다가 스켈레톤 로딩을 만들게 되었다.</p>

<h1 id="skeleton-loading-이란-">Skeleton Loading 이란 ?</h1>

<p>화면의 뼈대와 같은 느낌을 주는 로딩 UI를 사용해서 데이터를 불러오는 중일 때 사용하는 UI/UX 기법이다.</p>

<p>데이터 로딩 중 데이터가 불러와진 상태를 미리 알 수 있어서 유저에게 있어서는 예측이 가능하다는 장점과</p>

<p>불러온 이후 레이아웃이 동일하여 레이아웃이 망가지지 않는 장점이 있다.</p>

<p>조사를 진행하며 라이브러리를 사용하시는 분들도 많고 따로 구현하시는 분들도 많아</p>

<p>본인도 따로 구현하는 방법으로 진행하였다.</p>

<h3 id="skeletonloadingtsx">SkeletonLoading.tsx</h3>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">styles</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./SkeletonLoading.module.css</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nf">SkeletonLoading</span><span class="p">({</span><span class="kd">type</span><span class="p">}:</span> <span class="p">{</span><span class="nl">type</span><span class="p">:</span> <span class="kr">string</span><span class="p">}){</span>
    <span class="kd">let</span> <span class="nx">classes</span>

    <span class="k">switch </span><span class="p">(</span><span class="kd">type</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">case</span> <span class="dl">'</span><span class="s1">title</span><span class="dl">'</span><span class="p">:</span>
            <span class="nx">classes</span> <span class="o">=</span> <span class="nx">styles</span><span class="p">.</span><span class="nx">title</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="dl">'</span><span class="s1">text</span><span class="dl">'</span><span class="p">:</span>
            <span class="nx">classes</span> <span class="o">=</span> <span class="nx">styles</span><span class="p">.</span><span class="nx">text</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="dl">'</span><span class="s1">avatar</span><span class="dl">'</span><span class="p">:</span>
            <span class="nx">classes</span> <span class="o">=</span> <span class="nx">styles</span><span class="p">.</span><span class="nx">avatar</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="dl">'</span><span class="s1">thumbnail</span><span class="dl">'</span><span class="p">:</span>
            <span class="nx">classes</span> <span class="o">=</span> <span class="nx">styles</span><span class="p">.</span><span class="nx">thumbnail</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return </span><span class="p">(</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="s2">`</span><span class="p">${</span><span class="nx">styles</span><span class="p">.</span><span class="nx">skeleton</span><span class="p">}</span><span class="s2"> </span><span class="p">${</span><span class="nx">classes</span><span class="p">}</span><span class="s2">`</span><span class="si">}</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">)</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">SkeletonLoading</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="skeletonloadingmodulecss">SkeletonLoading.module.css</h3>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.skeleton</span> <span class="p">{</span>
    <span class="nl">background</span><span class="p">:</span> <span class="m">#ddd</span><span class="p">;</span>
    <span class="nl">border-radius</span><span class="p">:</span> <span class="m">4px</span><span class="p">;</span>
<span class="p">}</span>
<span class="nc">.skeleton.text</span> <span class="p">{</span>
    <span class="nl">width</span> <span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
    <span class="nl">height</span> <span class="p">:</span> <span class="m">16px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.skeleton.title</span> <span class="p">{</span>
    <span class="nl">width</span><span class="p">:</span> <span class="m">50%</span><span class="p">;</span>
    <span class="nl">height</span><span class="p">:</span> <span class="m">20px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.skeleton.avatar</span><span class="p">{</span>
    <span class="nl">width</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
    <span class="nl">height</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
    <span class="nl">border-radius</span><span class="p">:</span> <span class="m">50%</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.skeleton.thumbnail</span> <span class="p">{</span>
    <span class="nl">width</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
    <span class="nl">height</span> <span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>SkeletonLoading 의 뼈대가 되는 컴포넌트를 만들어서 string 타입으로 type을 받아서 여러 스타일을 사용할 수 있게 만들어주고</p>

<p>SkeletonLoading 컴포넌트를 활용해서 로딩 UI가 필요한 컴포넌트 레이아웃과 비슷하게 배치하여 새로운 컴포넌트를 만들어준다.</p>

<p><img src="/assets/images/posts/2023-07-19-Skeleton-loading/folder_image01.png" alt="folder01" /></p>

<h3 id="skeleton-componenetindexts">skeleton-componenet/index.ts</h3>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">SkeletonWorkbook</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./SkeletonWorkbook</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">SkeletonTopViewWorkbook</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./SkeletonTopViewWorkbook</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
    <span class="nx">SkeletonWorkbook</span><span class="p">,</span>
    <span class="nx">SkeletonTopViewWorkbook</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="skeletonworkbooktsx">SkeletonWorkbook.tsx</h3>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">styles</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./SkeletonWorkbook.module.css</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">SkeletonLoading</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../skeleton-root/SkeletonLoading</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">function</span> <span class="nf">SkeletonWorkbook</span><span class="p">(){</span>
    <span class="k">return</span><span class="p">(</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">skeleton_workbook_root</span><span class="si">}</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">title_container</span><span class="si">}</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nc">SkeletonLoading</span> <span class="na">type</span><span class="p">=</span><span class="s">"title"</span> <span class="p">/&gt;</span>
            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">body_container</span><span class="si">}</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nc">SkeletonLoading</span> <span class="na">type</span><span class="p">=</span><span class="s">"text"</span> <span class="p">/&gt;</span>
                <span class="p">&lt;</span><span class="nc">SkeletonLoading</span> <span class="na">type</span><span class="p">=</span><span class="s">"text"</span> <span class="p">/&gt;</span>
                <span class="p">&lt;</span><span class="nc">SkeletonLoading</span> <span class="na">type</span><span class="p">=</span><span class="s">"text"</span> <span class="p">/&gt;</span>
            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">)</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">SkeletonWorkbook</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="skeletontopviewworkbooktsx">SkeletonTopViewWorkbook.tsx</h3>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">styles</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./SkeletonTopViewWorkbook.module.css</span><span class="dl">'</span>
<span class="k">import</span> <span class="nx">SkeletonLoading</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../skeleton-root/SkeletonLoading</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">function</span> <span class="nf">SkeletonTopViewWorkbook</span><span class="p">(){</span>
    <span class="k">return</span><span class="p">(</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">skeleton_topview_root</span><span class="si">}</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nc">SkeletonLoading</span> <span class="na">type</span><span class="p">=</span><span class="s">"title"</span> <span class="p">/&gt;</span>
            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">body_container</span><span class="si">}</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">content_container</span><span class="si">}</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nc">SkeletonLoading</span> <span class="na">type</span><span class="p">=</span><span class="s">"text"</span> <span class="p">/&gt;</span>
                    <span class="p">&lt;</span><span class="nc">SkeletonLoading</span> <span class="na">type</span><span class="p">=</span><span class="s">"text"</span> <span class="p">/&gt;</span>
                    <span class="p">&lt;</span><span class="nc">SkeletonLoading</span> <span class="na">type</span><span class="p">=</span><span class="s">"text"</span> <span class="p">/&gt;</span>
                <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nc">SkeletonLoading</span> <span class="na">type</span><span class="p">=</span><span class="s">"text"</span> <span class="p">/&gt;</span>
                <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">)</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">SkeletonTopViewWorkbook</span><span class="p">;</span>
</code></pre></div></div>

<p>동적인 느낌을 주기 위해 조사를 진행하여 보니 컴포넌트와 CSS를 하나 더 생성하여 처리하는 방법이 있어서 이를 활용해보았다.</p>

<p><img src="/assets/images/posts/2023-07-19-Skeleton-loading/forder_image02.png" alt="folder02" /></p>

<h3 id="shimmertsx">Shimmer.tsx</h3>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">styles</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./Shimmer.module.css</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">function</span> <span class="nf">Shimmer</span><span class="p">(){</span>
    <span class="k">return </span><span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">shimmer_wrapper</span><span class="si">}</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="si">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">shimmer</span><span class="si">}</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">)</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">Shimmer</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="shimmermodulecss">Shimmer.module.css</h3>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.shimmer_wrapper</span> <span class="p">{</span>
    <span class="nl">position</span> <span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
    <span class="nl">top</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
    <span class="nl">left</span> <span class="p">:</span> <span class="m">0</span><span class="p">;</span>
    <span class="nl">width</span> <span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
    <span class="nl">height</span> <span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
    <span class="nl">animation</span><span class="p">:</span> <span class="n">loading_animation</span> <span class="m">2.5s</span> <span class="n">infinite</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.shimmer</span> <span class="p">{</span>
    <span class="nl">width</span> <span class="p">:</span> <span class="m">50%</span><span class="p">;</span>
    <span class="nl">height</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="n">rgba</span><span class="p">(</span><span class="m">255</span><span class="p">,</span><span class="m">255</span><span class="p">,</span><span class="m">255</span><span class="p">,</span><span class="m">0.2</span><span class="p">);</span>
    <span class="nl">transform</span><span class="p">:</span> <span class="n">skewX</span><span class="p">(</span><span class="m">-20deg</span><span class="p">);</span>
    <span class="nl">box-shadow</span><span class="p">:</span> <span class="m">0</span> <span class="m">0</span> <span class="m">30px</span> <span class="m">30px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">255</span><span class="p">,</span><span class="m">255</span><span class="p">,</span><span class="m">255</span><span class="p">,</span><span class="m">0.05</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">@keyframes</span> <span class="n">loading_animation</span><span class="p">{</span>
    <span class="err">0</span><span class="o">%</span> <span class="p">{</span>
        <span class="nl">transform</span><span class="p">:</span> <span class="n">translateX</span><span class="p">(</span><span class="m">-150%</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="err">50</span><span class="o">%</span> <span class="p">{</span>
        <span class="nl">transform</span><span class="p">:</span> <span class="n">translateX</span><span class="p">(</span><span class="m">-60%</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="err">100</span><span class="o">%</span> <span class="p">{</span>
        <span class="nl">transform</span><span class="p">:</span> <span class="n">translate</span><span class="p">(</span><span class="m">150%</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>React Query의 isLoading을 활용해서 이렇게 사용할 수 있다.</p>

<p><img src="/assets/images/posts/2023-07-19-Skeleton-loading/source.png" alt="sourceImage" /></p>]]></content><author><name>Seobisback</name></author><category term="Syntax" /><category term="React" /><category term="Typescript" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">아토믹 디자인 패턴 (Atomic Design Pattern) 공부 및 적용기 #1</title><link href="http://localhost:4000/syntax/2023/05/01/AtomicDesignPattern01.html" rel="alternate" type="text/html" title="아토믹 디자인 패턴 (Atomic Design Pattern) 공부 및 적용기 #1" /><published>2023-05-01T00:00:00+09:00</published><updated>2023-05-01T00:00:00+09:00</updated><id>http://localhost:4000/syntax/2023/05/01/AtomicDesignPattern01</id><content type="html" xml:base="http://localhost:4000/syntax/2023/05/01/AtomicDesignPattern01.html"><![CDATA[<h1 id="아토믹-디자인-패턴이란">아토믹 디자인 패턴이란?</h1>

<p><img src="/assets/images/posts/2023-05-01-AtomicDesignPattern01/atom01.png" alt="Untitled" /></p>

<ul>
  <li>좀 더 효과적인 컴포넌트를 구성하기 위한 방법론 중 하나이다.</li>
  <li>일관되고 견고하고 재사용이 가능한 디자인 시스템을 만드는데 도움을 준다.</li>
  <li>페이지를 디자인 하는 것이 아닌 컴포넌트들의 시스템을 디자인 하는 것이다.</li>
</ul>

<h2 id="장점과-단점">장점과 단점</h2>

<h3 id="장점">장점</h3>

<ul>
  <li>한 번만 구현해 놓고 계속 가져다 쓸 수 있는 코드가 생긴다.</li>
  <li>Storybook을 활용해서 컴포넌트들을 더 효과적으로 정리할 수 있다.</li>
  <li>어플리케이션의 복잡함을 해결해준다.</li>
  <li>뷰와 비즈니스 로직의 분리로 프로젝트가 확장될 때 코드에서 문제를 디버깅하기 쉽다.</li>
</ul>

<h3 id="단점">단점</h3>

<ul>
  <li>단기적으로 봤을 때 개발 시간이 오래걸린다.</li>
</ul>

<hr />

<h1 id="아토믹-디자인-패턴의-구성">아토믹 디자인 패턴의 구성</h1>

<h2 id="atom-원자">Atom (원자)</h2>

<p><img src="/assets/images/posts/2023-05-01-AtomicDesignPattern01/atom02.png" alt="Untitled" /></p>

<p>&lt; label, input, button atom &gt;</p>

<ul>
  <li>가장 작은 컴포넌트의 단위이다.</li>
  <li>원자는 어떠한 context가 주어져도 해당하는 컴포넌트가 생성될 수 있어야 한다.</li>
  <li>다양한 state(상태)를 가지고 있어야하며 추상적이지만 최대한 포용할 수 있게 설계 되어야 한다.</li>
  <li>원자는 margin이나 위치 값을 가지지 않는다.</li>
  <li>label, input, button과 같은 기본 HTML element 태그 혹은 글꼴, 애니메이션, 컬러 팔레트, 레이아웃과 같이 추상적인 요소도 포함될 수 있다.</li>
</ul>

<h2 id="molecule분자">Molecule(분자)</h2>

<p><img src="/assets/images/posts/2023-05-01-AtomicDesignPattern01/atom03.png" alt="Untitled" /></p>

<p>&lt; search from molecule &gt;</p>

<ul>
  <li>Atom(원자)을 두 개 이상 조합하면 Molecule(분자)가 된다.</li>
  <li>분자는 분자만의 프로퍼티를 가지고 있을 수 있고, 이를 활용해 원자에 기능을 만들어 줄 수 있다.</li>
  <li>분자가 원자의 위치값을 지정하기도 한다.</li>
</ul>

<h2 id="organism유기체">Organism(유기체)</h2>

<p><img src="/assets/images/posts/2023-05-01-AtomicDesignPattern01/atom04.png" alt="Untitled" /></p>

<p>&lt; haeder organism &gt;</p>

<ul>
  <li>Organism(유기체)은 분자를 엮어 만들어서 생성되고 때로는 분자가 되지 않은 원자가 엮이기도 한다.</li>
  <li>유기체가 완성되면 컴포넌트가 최종 모습을 가지게 된다.</li>
  <li>유기체는 분자와 원자의 위치 값을 조정한다.</li>
  <li>atom, molecule에 비해 좀 더 구체적으로 표현되고 컨텍스트를 가지기 때문에 상대적으로 재사용성이 낮아지는 특성을 가진다.</li>
</ul>

<h2 id="template-layout">Template (Layout)</h2>

<p><img src="/assets/images/posts/2023-05-01-AtomicDesignPattern01/atom05.png" alt="Untitled" /></p>

<p>&lt; layout이 적용된 molecule과 organism으로 구성된 template &gt;</p>

<ul>
  <li>템플릿은 만들어진 유기체와 컴포넌트의 position을 정해주는 역할을 한다.</li>
  <li>템플릿 파일은 주로 페이지를 구성하기 위해 서로 꿰매어진 유기체 그룹으로 구성되며, 이 부분에서 디자인을 확인하고 레이아웃이 실제로 구동하는지 볼 수 있다.</li>
  <li>템플릿에는 styling이나 color가 들어가지 않는다.</li>
  <li>템플릿의 역할은 페이지의 그리드를 정해주는 역할 뿐이다.</li>
  <li>실제 컴포넌트를 레이아웃에 배치하고 구조를 잡는 와이어 프레임이다.</li>
  <li>실제 콘텐츠가 없는 page 수준의 스켈레톤이라고 정의할 수 있다.</li>
</ul>

<h2 id="page">Page</h2>

<p><img src="/assets/images/posts/2023-05-01-AtomicDesignPattern01/atom06.png" alt="Untitled" /></p>

<p>&lt; 여러가지 콘텐츠를 template에 적용하여 최종 UI를 보여주는 page &gt;</p>

<ul>
  <li>page는 유저가 볼 수 있는 실제 콘텐츠를 담는다.</li>
  <li>template의 인스턴스라고 할 수 있다.</li>
  <li>template을 이용해서 각 그리드에 컴포넌트를 그려서 디스플레이 한다.</li>
</ul>

<hr />

<h1 id="어떻게-프로젝트-구조를-잡을까-">어떻게 프로젝트 구조를 잡을까 ?</h1>

<blockquote>
  <p>해당 소스는 Atomic Design Pattern과 React Recoil을 통한 어플리케이션 작성을 공부하기 위해 작성중인 코드이다.</p>

</blockquote>

<p>구조는 다른 분들의 소스를 참고하여 구성해보았다.</p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">├──</span> <span class="nx">Router</span><span class="p">.</span><span class="nx">tsx</span>
<span class="err">├──</span> <span class="nx">components</span>
<span class="err">│  </span> <span class="err">├──</span> <span class="nx">Atoms</span>
<span class="err">│  </span> <span class="err">│  </span> <span class="err">├──</span> <span class="nx">Button</span><span class="p">.</span><span class="nx">tsx</span>
<span class="err">│  </span> <span class="err">│  </span> <span class="err">├──</span> <span class="nx">Div</span><span class="p">.</span><span class="nx">tsx</span>
<span class="err">│  </span> <span class="err">│  </span> <span class="err">├──</span> <span class="nx">Input</span><span class="p">.</span><span class="nx">tsx</span>
<span class="err">│  </span> <span class="err">│  </span> <span class="err">├──</span> <span class="nx">Span</span><span class="p">.</span><span class="nx">tsx</span>
<span class="err">│  </span> <span class="err">│  </span> <span class="err">└──</span> <span class="nx">index</span><span class="p">.</span><span class="nx">ts</span>
<span class="err">│  </span> <span class="err">├──</span> <span class="nx">Molecules</span>
<span class="err">│  </span> <span class="err">│  </span> <span class="err">├──</span> <span class="nx">TodoCreateInput</span><span class="p">.</span><span class="nx">tsx</span>
<span class="err">│  </span> <span class="err">│  </span> <span class="err">└──</span> <span class="nx">index</span><span class="p">.</span><span class="nx">ts</span>
<span class="err">│  </span> <span class="err">├──</span> <span class="nx">Organisms</span>
<span class="err">│  </span> <span class="err">│  </span> <span class="err">├──</span> <span class="nx">TodoForm</span><span class="p">.</span><span class="nx">tsx</span>
<span class="err">│  </span> <span class="err">│  </span> <span class="err">└──</span> <span class="nx">index</span><span class="p">.</span><span class="nx">ts</span>
<span class="err">│  </span> <span class="err">├──</span> <span class="nx">Pages</span>
<span class="err">│  </span> <span class="err">│  </span> <span class="err">├──</span> <span class="nx">Main</span><span class="p">.</span><span class="nx">tsx</span>
<span class="err">│  </span> <span class="err">│  </span> <span class="err">└──</span> <span class="nx">index</span><span class="p">.</span><span class="nx">ts</span>
<span class="err">│  </span> <span class="err">└──</span> <span class="nx">Template</span>
<span class="err">│  </span>     <span class="err">└──</span> <span class="nx">index</span><span class="p">.</span><span class="nx">ts</span>
<span class="err">├──</span> <span class="nx">index</span><span class="p">.</span><span class="nx">tsx</span>
<span class="err">├──</span> <span class="nx">react</span><span class="o">-</span><span class="nx">app</span><span class="o">-</span><span class="nx">env</span><span class="p">.</span><span class="nx">d</span><span class="p">.</span><span class="nx">ts</span>
<span class="err">├──</span> <span class="nx">reportWebVitals</span><span class="p">.</span><span class="nx">ts</span>
<span class="err">├──</span> <span class="nx">setupTests</span><span class="p">.</span><span class="nx">ts</span>
<span class="err">├──</span> <span class="nx">state</span>
<span class="err">│  </span> <span class="err">└──</span> <span class="nx">index</span><span class="p">.</span><span class="nx">ts</span>
<span class="err">└──</span> <span class="nx">test</span>
    <span class="err">└──</span> <span class="nx">Pages</span>
        <span class="err">└──</span> <span class="nx">Main</span><span class="p">.</span><span class="nx">test</span><span class="p">.</span><span class="nx">tsx</span>
</code></pre></div></div>

<ul>
  <li>src 디렉토리 밑에 components 디렉토리를 만들고 역할 별로 디렉토리를 나눈 후 index에서 관리할 수 있게끔 구조를 잡아보았다.</li>
</ul>

<p><strong>‘component/Atoms/Input.tsx’</strong></p>

<ul>
  <li>또한 styled 컴포넌트를 적극 활용하여 스타일 코드를 props로 내려받아 사용할 수 있다.</li>
</ul>

<blockquote>
  <p>개인적으로 구조를 잡고 구성하는 것에는 시간이 많이 걸리고 고민이 많지만 정말 깔끔한 코드를 작성할 수 있는 것 같음.</p>

</blockquote>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">styled</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">styled-components</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Input</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">input</span><span class="o">&lt;</span><span class="nx">React</span><span class="p">.</span><span class="nx">CSSProperties</span> <span class="o">&amp;</span> <span class="p">{</span>
    <span class="nx">placeholderColor</span><span class="p">?:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span> 
<span class="o">&gt;</span><span class="s2">`
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;

    margin: </span><span class="p">${({</span> <span class="nx">margin</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="nx">margin</span><span class="p">}</span><span class="s2">;
    padding: </span><span class="p">${({</span> <span class="nx">padding</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="nx">padding</span> <span class="o">||</span> <span class="dl">'</span><span class="s1">8px</span><span class="dl">'</span><span class="p">}</span><span class="s2">;
    line-height: </span><span class="p">${({</span> <span class="nx">lineHeight</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="nx">lineHeight</span><span class="p">}</span><span class="s2">;
    height: </span><span class="p">${({</span> <span class="nx">height</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="nx">height</span> <span class="o">||</span> <span class="dl">'</span><span class="s1">40px</span><span class="dl">'</span><span class="p">}</span><span class="s2">;
    width: </span><span class="p">${({</span> <span class="nx">width</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="nx">width</span> <span class="o">||</span> <span class="dl">'</span><span class="s1">100%</span><span class="dl">'</span><span class="p">}</span><span class="s2">;
    border: </span><span class="p">${({</span> <span class="nx">border</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="nx">border</span> <span class="o">||</span> <span class="dl">'</span><span class="s1">1px solid #e8e8e8</span><span class="dl">'</span><span class="p">}</span><span class="s2">;
    box-sizing: border-box;
    border-radius: </span><span class="p">${({</span> <span class="nx">borderRadius</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="nx">borderRadius</span> <span class="o">||</span> <span class="dl">'</span><span class="s1">8px</span><span class="dl">'</span><span class="p">}</span><span class="s2">;
    background-color: </span><span class="p">${({</span><span class="nx">backgroundColor</span><span class="p">})</span> <span class="o">=&gt;</span> <span class="nx">backgroundColor</span><span class="p">}</span><span class="s2">;
    font-size: </span><span class="p">${({</span> <span class="nx">fontSize</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="nx">fontSize</span> <span class="o">||</span> <span class="dl">'</span><span class="s1">16px</span><span class="dl">'</span><span class="p">}</span><span class="s2">;

    :focus {
        outline: none;
    }
    ::placeholder {
        color: </span><span class="p">${({</span><span class="nx">placeholderColor</span><span class="p">})</span> <span class="o">=&gt;</span> <span class="nx">placeholderColor</span><span class="p">}</span><span class="s2">;
    }
`</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">Input</span><span class="p">;</span>
</code></pre></div></div>

<p>이렇게 구성한 Atom Component를 Molecule Component에서 좀 더 복잡한 구조의 컴포넌트로 만들어서 재사용할 수 있다.</p>

<p><strong>‘component/Molecules/TodoCreateInput.tsx’</strong></p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Atoms</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">components/Atoms</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">function</span> <span class="nf">TodoCreateInput</span><span class="p">(){</span>
    <span class="k">return</span><span class="p">(</span>
        <span class="p">&lt;</span><span class="nc">Atoms</span><span class="p">.</span><span class="nc">Div</span> <span class="na">display</span><span class="p">=</span><span class="s">'flex'</span> <span class="na">gap</span><span class="p">=</span><span class="s">"5px"</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">Atoms</span><span class="p">.</span><span class="nc">Input</span> <span class="na">border</span><span class="p">=</span><span class="s">"0px"</span> <span class="na">backgroundColor</span><span class="p">=</span><span class="s">"#f2f2f2"</span> <span class="na">placeholder</span><span class="p">=</span><span class="s">'할 일을 입력해주세요.'</span> <span class="na">placeholderColor</span><span class="p">=</span><span class="s">"#cecece"</span><span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nc">Atoms</span><span class="p">.</span><span class="nc">Button</span> <span class="na">border</span><span class="p">=</span><span class="s">"1px solid #e0e0e0"</span> <span class="na">borderRadius</span><span class="p">=</span><span class="s">"8px"</span><span class="p">&gt;</span>asdasd<span class="p">&lt;/</span><span class="nc">Atoms</span><span class="p">.</span><span class="nc">Button</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nc">Atoms</span><span class="p">.</span><span class="nc">Div</span><span class="p">&gt;</span>
    <span class="p">)</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">TodoCreateInput</span><span class="p">;</span>
</code></pre></div></div>

<p>더 깔끔하게 해당 디자인 패턴을 사용할 수 있는 방법을 이번 프로젝트를 통해 계속 연구해볼 계획이다.</p>

<p>Recoil도 빨리 공부해서 적용해보고 싶다. 재미있어보임</p>

<p>Github Source Link : <a href="https://github.com/sdf5771/my-todo-app.git">https://github.com/sdf5771/my-todo-app.git</a></p>

<hr />

<h3 id="스터디-참고-자료">스터디 참고 자료</h3>

<p>카카오 FE 기술블로그 : <a href="https://fe-developers.kakaoent.com/2022/220505-how-page-part-use-atomic-design-system/">카카오엔터테인먼트 FE 기술블로그</a></p>

<p>유튜브 : <a href="https://www.youtube.com/watch?v=qUSYwidqgFg">Atomic Design Pattern (아토믹 디자인 패턴)</a></p>]]></content><author><name>Seobisback</name></author><category term="Syntax" /><category term="React" /><category term="DesignPattern" /><category term="Typescript" /><summary type="html"><![CDATA[아토믹 디자인 패턴이란?]]></summary></entry><entry><title type="html">[Next JS] 학습 01 - 프로젝트 생성 및 개념 공부</title><link href="http://localhost:4000/syntax/2023/04/25/Next-js-practice.html" rel="alternate" type="text/html" title="[Next JS] 학습 01 - 프로젝트 생성 및 개념 공부" /><published>2023-04-25T00:00:00+09:00</published><updated>2023-04-25T00:00:00+09:00</updated><id>http://localhost:4000/syntax/2023/04/25/Next-js-practice</id><content type="html" xml:base="http://localhost:4000/syntax/2023/04/25/Next-js-practice.html"><![CDATA[<h1 id="1-next-js-app-프로젝트-만들기">1. next js app 프로젝트 만들기</h1>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npx</span> <span class="nx">create</span><span class="o">-</span><span class="nx">next</span><span class="o">-</span><span class="nx">app</span><span class="p">@</span><span class="nd">latest</span>
</code></pre></div></div>

<p><img src="/assets/images/posts/2023-04-25-Next-js-practice/next-js-01.png" alt="next-js-01" /></p>

<ul>
  <li>create-next-app으로 프로젝트를 만들면 여러 옵션을 선택한다.
    <ul>
      <li>Would you like to use TypeScript with this project? - 타입스크립트 사용 여부를 선택</li>
      <li>Would you like to use ESLint with this project - ESLint 사용 여부를 선택 (코딩 컨벤션에 위배되는 코드나 안티 패턴을 자동 검출하는 도구)</li>
      <li>Would you like to use Tailwind CSS with this project? - Tailwind CSS 사용 여부를 선택 (<a href="https://fe-developers.kakaoent.com/2022/220303-tailwind-tips/">https://fe-developers.kakaoent.com/2022/220303-tailwind-tips/</a>)</li>
      <li>Would you like to use ‘src/’ directory with this project? - src 폴더에서 관리를 할 것인지 root에서 관리를 할 것인지 선택</li>
      <li>Would you like to use experimental ‘app/’ directory with this project? - app 디렉토리를 실험적인걸 사용할건지 선택</li>
      <li>What import alias would you like configured? - import 시 Base 경로를 설정</li>
    </ul>
  </li>
</ul>

<h1 id="2-next-js에서의-page">2. Next js에서의 Page</h1>

<p>Next js는 React js로 만든 웹사이트와 다르게 라우터를 설정해 줄 필요가 없다 ← Next js와 React js의 차이점이 여기서 나타나게 된다 (프레임워크와 라이브러리의 차이)</p>

<ul>
  <li>pages 디렉토리 내부에 생성한 자바스크립트 파일이 곧 URL의 path가 되며, 해당 컴포넌트는 export default 해야한다.</li>
  <li>해당 컴포넌트의 이름은 크게 중요하지 않다. URL이 되는 것은 파일명이다.</li>
</ul>

<p><img src="/assets/images/posts/2023-04-25-Next-js-practice/next-js-02.png" alt="next-js-02" /></p>

<p><img src="/assets/images/posts/2023-04-25-Next-js-practice/next-js-03.png" alt="next-js-03" /></p>

<p><img src="/assets/images/posts/2023-04-25-Next-js-practice/next-js-04.png" alt="next-js-04" /></p>

<ul>
  <li>그리고 Next js에는 기본적으로 404 페이지가 제공된다.</li>
</ul>

<p><img src="/assets/images/posts/2023-04-25-Next-js-practice/next-js-05.png" alt="next-js-05" /></p>

<h1 id="3-getserversideprops">3. getServerSideProps</h1>

<ul>
  <li>기존 동적으로 렌더링하던 부분을 정적으로 Server Side에서 실행하기 위해 사용할 수 있다.</li>
</ul>

<h3 id="언제-사용해야-하는가">언제 사용해야 하는가?</h3>

<ul>
  <li>request time에 반드시 데이터를 fetch해야 하는 페이지를 pre-render해야 하는 경우에만 getServerSideProps를 사용해야 한다.</li>
  <li>데이터를 pre-render할 필요가 없다면 client side에서 데이터를 가져오는 것을 고려해야 한다.</li>
  <li>페이지에 자주 업데이트되는 데이터가 포함되어 있고 데이터를 pre-render할 필요가 없는 경우 클라이언트 측에서 데이터를 가져올 수 있다.
    <ol>
      <li>먼저 데이터가 없는 페이지를 즉시 표시한다.</li>
      <li>페이지의 일부는 Static Generation을 사용해 pre-render할 수 있다.</li>
      <li>없는 데이터를 위해 loading 상태를 표시할 수 있다.</li>
      <li>클라이언트 측에서 데이터를 가져와 준비가 되면 표시한다.</li>
    </ol>
  </li>
</ul>

<p>해당 접근 방식은 사용자 대시보드 페이지에 적합하다.</p>

<ul>
  <li>대시보드는 사용자 별 비공개 페이지이므로 SEO와 연관이 없다.</li>
  <li>페이지를 미리 렌더링할 필요가 없다.</li>
  <li>데이터가 자주 업데이트되므로 요청 시 데이터를 가져와야 한다.</li>
</ul>

<p>*pre-rendering :  HTML을 미리 렌더링하는 것이다. 해당 기능에는 두 가지 방식이 있다.</p>

<ul>
  <li>Static Generation : HTML을 빌드 타임에 생성해 두고 요청시마다 재사용하는 방법</li>
  <li>Server Side Rendering : 요청 시 마다 Server에서 HTML을 생성해주는 방법</li>
</ul>

<p>사용자에 따라서 브라우저의 JavaScript 사용을 꺼놓거나, 브라우저 버전이 낮아서 리엑트를 실행시키지 못할 경우에도 Next js는 미리 만들어둔 HTML이 있어서 화면에 렌더링 할 수 있다.</p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span><span class="nx">useState</span><span class="p">,</span> <span class="nx">useEffect</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Seo</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@/components/Seo</span><span class="dl">'</span>
 
<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nf">Home</span><span class="p">({</span><span class="nx">results</span><span class="p">}){</span>
    <span class="c1">// const [movies, setMovies] = useState([]);</span>
    <span class="c1">// useEffect(() =&gt; {</span>
    <span class="c1">//     (async () =&gt; {</span>
    <span class="c1">//         const {results} = await (await fetch("http://localhost:3000/api/movies")).json();</span>
    <span class="c1">//         setMovies(results)</span>
    <span class="c1">//     })();</span>
    <span class="c1">// },[])</span>
    <span class="k">return </span><span class="p">(</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">'home-container'</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">Seo</span> <span class="na">title</span><span class="p">=</span><span class="s">"Home"</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"movie-container"</span><span class="p">&gt;</span>
            <span class="si">{</span><span class="nx">results</span> <span class="p">?</span> <span class="nx">results</span><span class="p">.</span><span class="nf">map</span><span class="p">((</span><span class="nx">movie</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
                <span class="p">&lt;</span><span class="nt">div</span> <span class="na">key</span><span class="p">=</span><span class="si">{</span><span class="nx">movie</span><span class="p">.</span><span class="nx">id</span><span class="si">}</span><span class="p">&gt;</span>
                    <span class="p">&lt;</span><span class="nt">img</span> <span class="na">src</span><span class="p">=</span><span class="si">{</span><span class="s2">`https://image.tmdb.org/t/p/w500/</span><span class="p">${</span><span class="nx">movie</span><span class="p">.</span><span class="nx">poster_path</span><span class="p">}</span><span class="s2">`</span><span class="si">}</span> <span class="p">/&gt;</span>
                    <span class="p">&lt;</span><span class="nt">h4</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">movie</span><span class="p">.</span><span class="nx">original_title</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">h4</span><span class="p">&gt;</span>
                <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="p">))</span> <span class="p">:</span> <span class="p">&lt;</span><span class="nt">h4</span><span class="p">&gt;</span>...now loading<span class="p">&lt;/</span><span class="nt">h4</span><span class="p">&gt;</span><span class="si">}</span>
            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">style</span> <span class="na">jsx</span><span class="p">&gt;</span><span class="si">{</span>
                <span class="s2">`
                    .movie-container{
                        margin-top: 30px;
                        width: 100%;
                        display: flex;
                        justify-content: center;
                        gap: 30px;
                        flex-wrap: wrap;   
                    }
                    .movie-container &gt; div &gt; img{
                        max-width: 100%;
                        border-radius: 12px;
                        transition: transform 0.2s ease-in-out;
                        box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 12px;
                    }
                    .movie-container &gt; div:hover &gt; img{
                        transform: scale(1.05) ;
                    }
                    .movie-container &gt; div {
                        display: flex;
                        flex-direction: column;
                        padding: 10px;
                        width: 220px;
                        overflow: hidden;
                        cursor: pointer;
                    }
                    .movie-container &gt; div &gt; h4{
                        font-size: 1rem;
                        text-align: center;
                        overflow: hidden;
                        text-overflow: ellipsis;
                        white-space: nowrap;
                    }
                `</span>
            <span class="si">}</span>
            <span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">async</span> <span class="kd">function</span> <span class="nf">getServerSideProps</span><span class="p">(){</span>
    <span class="kd">const</span> <span class="p">{</span><span class="nx">results</span><span class="p">}</span> <span class="o">=</span> <span class="k">await </span><span class="p">(</span><span class="k">await</span> <span class="nf">fetch</span><span class="p">(</span><span class="dl">"</span><span class="s2">http://localhost:3000/api/movies</span><span class="dl">"</span><span class="p">)).</span><span class="nf">json</span><span class="p">();</span>

    <span class="k">return</span> <span class="p">{</span>
        <span class="na">props</span><span class="p">:</span> <span class="p">{</span>
            <span class="nx">results</span><span class="p">,</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="결과">결과</h3>

<p><img src="/assets/images/posts/2023-04-25-Next-js-practice/next-js-06.png" alt="next-js-06" /></p>]]></content><author><name>Seobisback</name></author><category term="Syntax" /><category term="React" /><category term="SEO" /><category term="NextJS" /><summary type="html"><![CDATA[1. next js app 프로젝트 만들기]]></summary></entry><entry><title type="html">Technical SEO를 위한 동적 메타태그 작성 feat.React Project</title><link href="http://localhost:4000/syntax/2023/04/15/Technical-SEO-meta-tag.html" rel="alternate" type="text/html" title="Technical SEO를 위한 동적 메타태그 작성 feat.React Project" /><published>2023-04-15T00:00:00+09:00</published><updated>2023-04-15T00:00:00+09:00</updated><id>http://localhost:4000/syntax/2023/04/15/Technical-SEO-meta-tag</id><content type="html" xml:base="http://localhost:4000/syntax/2023/04/15/Technical-SEO-meta-tag.html"><![CDATA[<p>현재 작업중인 팀 프로젝트에서 SEO를 위한 메타 태그를 작업하며 공부한 것을 기록해본다.</p>

<h1 id="technical-seo">Technical SEO</h1>

<p>테크니컬 SEO는 웹 사이트 검색 순위 향상을 위해서 기술적인 요구 사항을 확인하는 과정이다.</p>

<p>크롤링과 인덱싱, 렌더링 및 웹사이트 구조 등이 포함된다.</p>

<p>구글이나 네이버 같은 검색 사이트에서 내가 운영중인 사이트와 관련 키워드로 검색할 경우</p>

<p>상단에 노출 시켜서 검색을 통한 유입률을 올리고자 하는 작업이며 그러므로 아주 중요한 작업이다.</p>

<p>현재 내가 작업중인 프로그램은 Qualk라는 프로그램으로 “Google Analytics” 나 여러 자격증을 공부할 수 있는 공간을 만드는 중이다.</p>

<p>내 사이트가 크롤 봇이 좋게 봐주는 사이트로 만들기 위한 작업 중</p>

<p>메타 태그에 관한 작업을 고민한 글을 써본다.</p>

<h1 id="메타-태그-meta-tag">메타 태그 (Meta tag)</h1>

<p>웹페이지 자체의 정보를 명시하기 위한 목적으로 사용되는 HTML 태그를 의미한다.</p>

<p>보통 &lt;head&gt; 요소 아래 배치하고 일반 유저가 보는 웹 컨텐츠에는 영향을 주지 않는다.</p>

<h3 id="그럼에도-왜-이것을-중요하게-작업해야-하는가">그럼에도 왜 이것을 중요하게 작업해야 하는가?</h3>

<p>검색엔진과 같은 기계들이 웹페이지를 읽어야할 때는 메타 태그의 내용들이 해당 서비스에서 어떻게 표시될지를 결정하는 매우 핵심적인 요소가 된다.</p>

<p>이를 현재 작업중인 React에서 어떻게 동적으로 활용할지 해당 내용을 학습하면서 고민을 해보았다.</p>

<hr />

<h1 id="작업-전-해결을-위한-고민">작업 전 해결을 위한 고민</h1>

<ul>
  <li>Qualk는 다른 컨텐츠도 많지만 해당 자격증 관련 문제를 제공하기 위한 사이트이다.</li>
  <li>그러므로 해당 문제마다 다른 키워드에 의해 크롤러에게 노출이 되어야 하므로 각 문제나 URL depth 마다 각각의 동적인 데이터로 작성이 필요하다고 생각하였다.</li>
  <li>meta tag의 추가, 수정, 삭제가 쉽게 되어야 한다.</li>
  <li>내가 원하는 곳에서 컴포넌트처럼 불러오고 싶다.</li>
</ul>

<hr />

<h2 id="고민과-아이디어를-도출해냈으니-학습-후-작업을-진행하면-된다">고민과 아이디어를 도출해냈으니 학습 후 작업을 진행하면 된다.</h2>

<h1 id="react-helmet-async">react-helmet-async</h1>

<p>나는 <code class="language-plaintext highlighter-rouge">react-helmet-async</code>라는 라이브러리를 사용하여 작업을 진행하였다.</p>

<p><a href="https://www.npmjs.com/package/react-helmet-async">npm: react-helmet-async</a></p>

<p>설치 후 DOCS에서 사용 방법을 확인해보니 해당 라이브러리를 사용하기 전</p>

<p>상단 컴포넌트를 Provider로 wrapping 할 필요가 있는 듯 하였다.</p>

<h2 id="helmetprovider-wrapping">HelmetProvider Wrapping</h2>

<p>Qualk : root/index.tsx</p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">ReactDOM</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-dom/client</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">BrowserRouter</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-router-dom</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">App</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./App</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">store</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">store/store</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">Provider</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-redux</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">HelmetProvider</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-helmet-async</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">ReactDOM</span><span class="p">.</span><span class="nf">createRoot</span><span class="p">(</span>
  <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">root</span><span class="dl">'</span><span class="p">)</span> <span class="k">as</span> <span class="nx">HTMLElement</span>
<span class="p">);</span>
<span class="nx">root</span><span class="p">.</span><span class="nf">render</span><span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Provider</span> <span class="na">store</span><span class="p">=</span><span class="si">{</span><span class="nx">store</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">BrowserRouter</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nc">HelmetProvider</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="nc">App</span> <span class="p">/&gt;</span>
            <span class="p">&lt;/</span><span class="nc">HelmetProvider</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nc">BrowserRouter</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">Provider</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">react-helmet-async</code>을 import 후 <code class="language-plaintext highlighter-rouge">HelmetProvider</code>를 가져와서 최상단 컴포넌트에 wrapping해주었다. (App 밑에 다양한 컴포넌트에서 해당 기능을 사용할 생각이기 때문)</li>
</ul>

<h2 id="component-화">Component 화</h2>

<p><img src="/assets/images/posts/2023-04-15-Technical-SEO-meta-tag/seo01.png" alt="seo01" /></p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">Helmet</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-helmet-async</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">type</span> <span class="nx">SEOMetaTagPropsType</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">title</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
    <span class="nl">description</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
    <span class="nl">imgSrc</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
    <span class="nl">url</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
    <span class="nl">keywords</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">SEOMetaTag</span> <span class="o">=</span> <span class="p">({</span><span class="nx">title</span><span class="p">,</span> <span class="nx">description</span><span class="p">,</span> <span class="nx">imgSrc</span><span class="p">,</span> <span class="nx">url</span><span class="p">,</span> <span class="nx">keywords</span><span class="p">}:</span> <span class="nx">SEOMetaTagPropsType</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span><span class="p">(</span>
        <span class="p">&lt;</span><span class="nc">Helmet</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="p">=</span><span class="s">"type"</span> <span class="na">content</span><span class="p">=</span><span class="s">"website"</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="p">=</span><span class="s">"title"</span> <span class="na">content</span><span class="p">=</span><span class="si">{</span><span class="nx">title</span><span class="si">}</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="p">=</span><span class="s">"description"</span> <span class="na">content</span><span class="p">=</span><span class="si">{</span><span class="nx">description</span><span class="si">}</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="p">=</span><span class="s">"keywords"</span> <span class="na">content</span><span class="p">=</span><span class="si">{</span><span class="nx">keywords</span><span class="si">}</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="p">=</span><span class="s">"site_name"</span> <span class="na">content</span><span class="p">=</span><span class="si">{</span><span class="nx">title</span><span class="si">}</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="p">=</span><span class="s">"image"</span> <span class="na">content</span><span class="p">=</span><span class="si">{</span><span class="nx">imgSrc</span><span class="si">}</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="p">=</span><span class="s">"url"</span> <span class="na">content</span><span class="p">=</span><span class="si">{</span><span class="nx">url</span><span class="si">}</span> <span class="p">/&gt;</span>

            <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">property</span><span class="p">=</span><span class="s">"og:type"</span> <span class="na">content</span><span class="p">=</span><span class="s">"website"</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">property</span><span class="p">=</span><span class="s">"og:title"</span> <span class="na">content</span><span class="p">=</span><span class="si">{</span><span class="nx">title</span><span class="si">}</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">property</span><span class="p">=</span><span class="s">"og:site_name"</span> <span class="na">content</span><span class="p">=</span><span class="si">{</span><span class="nx">title</span><span class="si">}</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">property</span><span class="p">=</span><span class="s">"og:description"</span> <span class="na">content</span><span class="p">=</span><span class="si">{</span><span class="nx">description</span><span class="si">}</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">property</span><span class="p">=</span><span class="s">"og:image"</span> <span class="na">content</span><span class="p">=</span><span class="si">{</span><span class="nx">imgSrc</span><span class="si">}</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">property</span><span class="p">=</span><span class="s">"og:url"</span> <span class="na">content</span><span class="p">=</span><span class="si">{</span><span class="nx">url</span><span class="si">}</span> <span class="p">/&gt;</span>

            <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">property</span><span class="p">=</span><span class="s">"twitter:type"</span> <span class="na">content</span><span class="p">=</span><span class="s">"website"</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">property</span><span class="p">=</span><span class="s">"twitter:title"</span> <span class="na">content</span><span class="p">=</span><span class="si">{</span><span class="nx">title</span><span class="si">}</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">property</span><span class="p">=</span><span class="s">"twitter:site_name"</span> <span class="na">content</span><span class="p">=</span><span class="si">{</span><span class="nx">title</span><span class="si">}</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">property</span><span class="p">=</span><span class="s">"twitter:description"</span> <span class="na">content</span><span class="p">=</span><span class="si">{</span><span class="nx">description</span><span class="si">}</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">property</span><span class="p">=</span><span class="s">"twitter:image"</span> <span class="na">content</span><span class="p">=</span><span class="si">{</span><span class="nx">imgSrc</span><span class="si">}</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">property</span><span class="p">=</span><span class="s">"twitter:url"</span> <span class="na">content</span><span class="p">=</span><span class="si">{</span><span class="nx">url</span><span class="si">}</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="p">=</span><span class="s">"canonical"</span> <span class="na">href</span><span class="p">=</span><span class="si">{</span><span class="nx">url</span><span class="si">}</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="p">=</span><span class="s">"alternate"</span> <span class="na">hrefLang</span><span class="p">=</span><span class="s">"ko"</span> <span class="na">href</span><span class="p">=</span><span class="si">{</span><span class="nx">url</span><span class="si">}</span> <span class="p">/&gt;</span>
        <span class="p">&lt;/</span><span class="nc">Helmet</span><span class="p">&gt;</span>
    <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">SEOMetaTag</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>위와 같이 <code class="language-plaintext highlighter-rouge">react-helmet-async</code>에서 <code class="language-plaintext highlighter-rouge">Helmet</code>  을 import 해서 meta tag를 컴포넌트로 만든 후 meta tag 삽입이 필요한 페이지를 담당하는 컴포넌트에서 데이터를 넣고 호출하는 방법을 사용하면 편한 것 같다.</li>
</ul>

<h2 id="seometatag-component-사용">SEOMetaTag Component 사용</h2>

<p><img src="/assets/images/posts/2023-04-15-Technical-SEO-meta-tag/seo02.png" alt="seo02" /></p>

<p>나중에 검색 키워드가 회의를 통해 확립되면 해당 부분들을 동적으로 변경해주면 된다.</p>

<p><del>SEO는 사이트맵도 작업해야하고 URL 구조도 생각 많이해야하고 정말 어렵다..</del></p>]]></content><author><name>Seobisback</name></author><category term="Syntax" /><category term="React" /><category term="SEO" /><category term="MetaTag" /><summary type="html"><![CDATA[현재 작업중인 팀 프로젝트에서 SEO를 위한 메타 태그를 작업하며 공부한 것을 기록해본다.]]></summary></entry><entry><title type="html">[Python]백준 : 10986 나머지 합</title><link href="http://localhost:4000/syntax/2023/04/13/Python-Prefix-sum-reminder.html" rel="alternate" type="text/html" title="[Python]백준 : 10986 나머지 합" /><published>2023-04-13T00:00:00+09:00</published><updated>2023-04-13T00:00:00+09:00</updated><id>http://localhost:4000/syntax/2023/04/13/Python-Prefix-sum-reminder</id><content type="html" xml:base="http://localhost:4000/syntax/2023/04/13/Python-Prefix-sum-reminder.html"><![CDATA[<h1 id="백준--10986-나머지-합">백준 : 10986 나머지 합</h1>

<h2 id="문제">문제</h2>

<p>수 N개 A1, A2, …, AN이 주어진다. 이때, 연속된 부분 구간의 합이 M으로 나누어 떨어지는 구간의 개수를 구하는 프로그램을 작성하시오.</p>

<p>즉, Ai + … + Aj (i ≤ j) 의 합이 M으로 나누어 떨어지는 (i, j) 쌍의 개수를 구해야 한다.</p>

<h2 id="입력">입력</h2>

<p>첫째 줄에 N과 M이 주어진다. (1 ≤ N ≤ 106, 2 ≤ M ≤ 103)</p>

<p>둘째 줄에 N개의 수 A1, A2, …, AN이 주어진다. (0 ≤ Ai ≤ 109)</p>

<h2 id="출력">출력</h2>

<p>첫째 줄에 연속된 부분 구간의 합이 M으로 나누어 떨어지는 구간의 개수를 출력한다.</p>

<h2 id="예제-입력-1">예제 입력 1</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>5 3
1 2 3 1 2

</code></pre></div></div>

<h2 id="예제-출력-1">예제 출력 1</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>7

</code></pre></div></div>

<h2 id="출처">출처</h2>

<ul>
  <li>문제를 만든 사람: <a href="https://www.acmicpc.net/user/baekjoon">baekjoon</a></li>
  <li>데이터를 추가한 사람: <a href="https://www.acmicpc.net/user/cs71107">cs71107</a></li>
</ul>

<h2 id="알고리즘-분류">알고리즘 분류</h2>

<ul>
  <li><a href="https://www.acmicpc.net/problem/tag/124">수학</a></li>
  <li><a href="https://www.acmicpc.net/problem/tag/139">누적 합</a></li>
</ul>

<hr />

<h2 id="풀이">풀이</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">sys</span>
<span class="c1"># input값의 크기가 크므로 input 함수에 sys.stdin.readline을 override
</span><span class="nb">input</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="n">readline</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="n">result_count</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1"># 정답 Count
</span>    <span class="n">n</span><span class="p">,</span> <span class="n">m</span> <span class="o">=</span> <span class="nf">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nf">input</span><span class="p">().</span><span class="nf">split</span><span class="p">())</span> <span class="c1"># 수열의 개수, 나누어 떨어져야 하는 수
</span>    <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nf">input</span><span class="p">().</span><span class="nf">split</span><span class="p">())]</span> <span class="c1"># 원본 배열
</span>    <span class="n">s</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span> <span class="c1"># 합 배열
</span>    <span class="n">c</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">m</span> <span class="c1"># 같은 나머지의 인덱스를 카운트하는 리스트
</span>
    <span class="c1"># 합 배열(s)의 0번 index 값을 원본 배열(a) 0번으로 초기화
</span>    <span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>

    <span class="c1"># 합 배열(s)의 1번 index부터 구간 합을 계산하여 저장
</span>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
        <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

    <span class="c1"># 합 배열(s)에 m으로 나눈 나머지 값을 저장하고, 만약 해당 나머지가 0이면 result_count에 플러스 해준다.
</span>    <span class="c1"># 같은 나머지의 인덱스를 카운트하는 리스트(c)에 해당 나머지 값과 동일한 index 내에 count를 증가해줌
</span>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">%</span> <span class="n">m</span>
        <span class="k">if</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">:</span>
            <span class="n">result_count</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="n">c</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="c1"># 나누어 떨어져야 하는 수(m) 까지 반복하면서, 만약 c[i] 가 1보다 클 경우
</span>    <span class="c1"># c[i] * (c[i]-1) 를 계산한 후 2로 나눈 값을 result_count에 더한다. (combination 공식)
</span>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
            <span class="n">result_count</span> <span class="o">+=</span> <span class="p">(</span><span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span><span class="p">)</span>

    <span class="c1"># 정답 출력
</span>    <span class="nf">print</span><span class="p">(</span><span class="n">result_count</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="도식화">도식화</h2>

<p><img src="/assets/images/posts/2023-04-13-Python-Prefix-sum-reminder/prefix-sum-reminder01.jpg" alt="prefix-sum-reminder01" /></p>

<h2 id="결과">결과</h2>

<p><img src="/assets/images/posts/2023-04-13-Python-Prefix-sum-reminder/prefix-sum-reminder02.png" alt="prefix-sum-reminder02" /></p>]]></content><author><name>Seobisback</name></author><category term="Syntax" /><category term="Python" /><category term="CodingTest" /><summary type="html"><![CDATA[백준 : 10986 나머지 합]]></summary></entry><entry><title type="html">[Python]백준 : 11660 구간 합 구하기 5</title><link href="http://localhost:4000/syntax/2023/04/13/Python-Prefix-sum-5.html" rel="alternate" type="text/html" title="[Python]백준 : 11660 구간 합 구하기 5" /><published>2023-04-13T00:00:00+09:00</published><updated>2023-04-13T00:00:00+09:00</updated><id>http://localhost:4000/syntax/2023/04/13/Python-Prefix-sum-5</id><content type="html" xml:base="http://localhost:4000/syntax/2023/04/13/Python-Prefix-sum-5.html"><![CDATA[<h1 id="백준--11660-구간-합-구하기-5">백준 : 11660 구간 합 구하기 5</h1>

<h2 id="문제">문제</h2>

<p>N×N개의 수가 N×N 크기의 표에 채워져 있다. (x1, y1)부터 (x2, y2)까지 합을 구하는 프로그램을 작성하시오. (x, y)는 x행 y열을 의미한다.</p>

<p>예를 들어, N = 4이고, 표가 아래와 같이 채워져 있는 경우를 살펴보자.</p>

<table>
  <thead>
    <tr>
      <th>1</th>
      <th>2</th>
      <th>3</th>
      <th>4</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>2</td>
      <td>3</td>
      <td>4</td>
      <td>5</td>
    </tr>
    <tr>
      <td>3</td>
      <td>4</td>
      <td>5</td>
      <td>6</td>
    </tr>
    <tr>
      <td>4</td>
      <td>5</td>
      <td>6</td>
      <td>7</td>
    </tr>
  </tbody>
</table>

<p>여기서 (2, 2)부터 (3, 4)까지 합을 구하면 3+4+5+4+5+6 = 27이고, (4, 4)부터 (4, 4)까지 합을 구하면 7이다.</p>

<p>표에 채워져 있는 수와 합을 구하는 연산이 주어졌을 때, 이를 처리하는 프로그램을 작성하시오.</p>

<h2 id="입력">입력</h2>

<p>첫째 줄에 표의 크기 N과 합을 구해야 하는 횟수 M이 주어진다. (1 ≤ N ≤ 1024, 1 ≤ M ≤ 100,000) 둘째 줄부터 N개의 줄에는 표에 채워져 있는 수가 1행부터 차례대로 주어진다. 다음 M개의 줄에는 네 개의 정수 x1, y1, x2, y2 가 주어지며, (x1, y1)부터 (x2, y2)의 합을 구해 출력해야 한다. 표에 채워져 있는 수는 1,000보다 작거나 같은 자연수이다. (x1 ≤ x2, y1 ≤ y2)</p>

<h2 id="출력">출력</h2>

<p>총 M줄에 걸쳐 (x1, y1)부터 (x2, y2)까지 합을 구해 출력한다.</p>

<h2 id="예제-입력-1">예제 입력 1</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>4 3
1 2 3 4
2 3 4 5
3 4 5 6
4 5 6 7
2 2 3 4
3 4 3 4
1 1 4 4

</code></pre></div></div>

<h2 id="예제-출력-1">예제 출력 1</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>27
6
64

</code></pre></div></div>

<h2 id="예제-입력-2">예제 입력 2</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2 4
1 2
3 4
1 1 1 1
1 2 1 2
2 1 2 1
2 2 2 2

</code></pre></div></div>

<h2 id="예제-출력-2">예제 출력 2</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1
2
3
4

</code></pre></div></div>

<h2 id="출처">출처</h2>

<p><a href="https://www.acmicpc.net/problem/11660">11660번: 구간 합 구하기 5</a></p>

<h2 id="알고리즘-분류">알고리즘 분류</h2>

<ul>
  <li><a href="https://www.acmicpc.net/problem/tag/25">다이나믹 프로그래밍</a></li>
  <li><a href="https://www.acmicpc.net/problem/tag/139">누적 합</a></li>
</ul>

<hr />

<h2 id="풀이">풀이</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">sys</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">n</span><span class="p">,</span> <span class="n">m</span> <span class="o">=</span> <span class="nf">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="n">sys</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="nf">readline</span><span class="p">().</span><span class="nf">split</span><span class="p">())</span>

		<span class="c1"># 원본 배열 A 초기화
</span>    <span class="n">A</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)]</span> 
		<span class="c1"># 원본 테이블에서 구간합을 구하여 저장할 배열 D 초기화 
</span>    <span class="n">D</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)]</span>

		<span class="c1">#원본 배열 A 데이터를 입력받아 append
</span>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="n">A_row</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="nf">int</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">sys</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="nf">readline</span><span class="p">().</span><span class="nf">split</span><span class="p">()]</span>
        <span class="n">A</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">A_row</span><span class="p">)</span>

		<span class="c1"># (1,1)부터 사용하므로 반복을 1부터 n+1까지 진행
</span>		<span class="c1"># 구간합을 계산하여 배열 D에 저장
</span>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
            <span class="n">D</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">D</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="n">D</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">D</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span>

		<span class="c1"># x1, y1, x2, y2 를 m 만큼 반복하여 입력받고,
</span>		<span class="c1"># 입력 받은 후 계산하여 출력
</span>    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
        <span class="n">x1</span><span class="p">,</span> <span class="n">y1</span><span class="p">,</span> <span class="n">x2</span><span class="p">,</span> <span class="n">y2</span> <span class="o">=</span> <span class="nf">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="n">sys</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="nf">readline</span><span class="p">().</span><span class="nf">split</span><span class="p">())</span>
        <span class="n">this_result</span> <span class="o">=</span> <span class="n">D</span><span class="p">[</span><span class="n">x2</span><span class="p">][</span><span class="n">y2</span><span class="p">]</span> <span class="o">-</span> <span class="n">D</span><span class="p">[</span><span class="n">x1</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">y2</span><span class="p">]</span> <span class="o">-</span> <span class="n">D</span><span class="p">[</span><span class="n">x2</span><span class="p">][</span><span class="n">y1</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">D</span><span class="p">[</span><span class="n">x1</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">y1</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">this_result</span><span class="p">)</span> <span class="c1"># 결과 값 출력
</span></code></pre></div></div>

<h2 id="풀이-과정-도식화">풀이 과정 (도식화)</h2>

<p><img src="/assets/images/posts/2023-04-13-Python-Prefix-sum-5/prefixsum01.jpg" alt="prefixsum01" /></p>

<h2 id="결과">결과</h2>

<p><img src="/assets/images/posts/2023-04-13-Python-Prefix-sum-5/prefixsum02.png" alt="prefixsum02" /></p>]]></content><author><name>Seobisback</name></author><category term="Syntax" /><category term="Python" /><category term="CodingTest" /><summary type="html"><![CDATA[백준 : 11660 구간 합 구하기 5]]></summary></entry><entry><title type="html">[데이터 포맷] JSON &amp;amp; XML</title><link href="http://localhost:4000/syntax/2023/04/13/JSON-XML.html" rel="alternate" type="text/html" title="[데이터 포맷] JSON &amp;amp; XML" /><published>2023-04-13T00:00:00+09:00</published><updated>2023-04-13T00:00:00+09:00</updated><id>http://localhost:4000/syntax/2023/04/13/JSON-XML</id><content type="html" xml:base="http://localhost:4000/syntax/2023/04/13/JSON-XML.html"><![CDATA[<p>데이터 - 이론을 세우는 데 기초가 되는 사실, 또는 바탕이 되는 자료나 관찰이나 실험, 조사로 얻은 사실이나 자료 등을 의미</p>

<p>데이터는 복잡성을 지닌다. 이러한 데이터를 컴퓨터가 주고 받으려면 어떤 약속(포맷)을 정하고 주고 받아야 한다. 어떻게 “표현”하는가에 대한 답.</p>

<p>대표적으로 JSON, XML이 있다.</p>

<h1 id="1-json">#1. JSON</h1>

<ul>
  <li>JSON(JavaScript Object Notation) 은 Javascript 객체 문법으로 구조화된 데이터를 표현하기 위한 표준 포맷이다.</li>
  <li>위에서 설명하듯 JSON은 Javascript 객체 문법을 따르는 문자열이다. JSON 안에는 마찬가지로 Javascript의 undefined를 제외한 기본 데이터 타입인 문자열, 숫자, 배열, 불리언 그리고 다른 객체를 포함할 수 있다.</li>
  <li>자바스크립트와 호환성이 좋다.</li>
</ul>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
    <span class="dl">"</span><span class="s2">question_type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">'</span><span class="s1">GAIQ</span><span class="dl">'</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">question_id</span><span class="dl">"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">question_name</span><span class="dl">"</span><span class="p">:</span> <span class="dl">'</span><span class="s1">필터가 적용된 후 필터링 된 데이터를 복구할 수 있는 옵션은?</span><span class="dl">'</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">question_content</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span><span class="dl">''</span><span class="p">,</span><span class="dl">''</span><span class="p">,</span><span class="dl">''</span><span class="p">,</span><span class="dl">''</span><span class="p">],</span>
    <span class="dl">"</span><span class="s2">question_description</span><span class="dl">"</span><span class="p">:</span> <span class="dl">'</span><span class="s1">보기에 필터를 적용한 뒤 처리한 데이터는 복구할 수 없습니다.</span><span class="se">\n</span><span class="dl">'</span> <span class="o">+</span>
        <span class="dl">'</span><span class="s1">필터가 적용한 시점을 기준으로 전/후의 데이터가 달라지므로 일반적으로 보기 생성시점에 필터 설정 작업을 진행합니다.</span><span class="se">\n</span><span class="dl">'</span> <span class="o">+</span>
        <span class="dl">'</span><span class="s1">(필터 설정 시, 효과가 데이터에 적용되기까지 최대 24시간 소요)</span><span class="dl">'</span><span class="p">,</span>
		<span class="dl">"</span><span class="s2">question_correct</span><span class="dl">"</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">question_reference</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span>
            <span class="dl">"</span><span class="s2">title</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">구글 도움말</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">author</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Google</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">link</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">https://support.google.com/analytics/answer/6086075</span><span class="dl">"</span>
        <span class="p">}</span>
    <span class="p">],</span>
    <span class="dl">"</span><span class="s2">question_tag</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">GAIQ</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Google Analytics</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">필터링</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">필터</span><span class="dl">"</span><span class="p">],</span>
    <span class="dl">"</span><span class="s2">question_create</span><span class="dl">"</span><span class="p">:</span> <span class="k">new</span> <span class="nc">Date</span><span class="p">(),</span>
    <span class="dl">"</span><span class="s2">question_edited</span><span class="dl">"</span><span class="p">:</span> <span class="k">new</span> <span class="nc">Date</span><span class="p">(),</span>
    <span class="dl">"</span><span class="s2">question_view</span><span class="dl">"</span><span class="p">:</span> <span class="mi">213</span><span class="p">,</span>
<span class="p">},</span>
<span class="p">{</span>
    <span class="dl">"</span><span class="s2">question_type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">'</span><span class="s1">GAIQ</span><span class="dl">'</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">question_id</span><span class="dl">"</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">question_name</span><span class="dl">"</span><span class="p">:</span> <span class="dl">'</span><span class="s1">자동 태그 추가를 통해 데이터를 수집하는 트래픽 종류는?</span><span class="dl">'</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">question_content</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span><span class="dl">''</span><span class="p">,</span><span class="dl">''</span><span class="p">,</span><span class="dl">''</span><span class="p">,</span><span class="dl">''</span><span class="p">],</span>
    <span class="dl">"</span><span class="s2">question_description</span><span class="dl">"</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Google Ads에서는 Google Ads 전환 추적 및 광고 클릭에 대한 성과 측정을 위한 목적으로 자동 태그를 설정할 수 있습니다.</span><span class="se">\n</span><span class="dl">'</span> <span class="o">+</span>
        <span class="dl">'</span><span class="s1">사용자가 광고를 클릭하면 자동 태그 추가 기능에서 추가 정보(</span><span class="se">\'</span><span class="s1">Google 클릭 식별자의</span><span class="se">\'</span><span class="s1">의 약어인 GCLID라는 매개변수)를 사용자가 클릭하여 연결된 URL에 추가합니다.</span><span class="se">\n</span><span class="dl">'</span> <span class="o">+</span>
        <span class="dl">'</span><span class="s1">자동 태그 추가 기능은 다음을 수행하기 전에 설정해야 하는 기능입니다.</span><span class="se">\n</span><span class="dl">'</span> <span class="o">+</span>
        <span class="dl">'</span><span class="s1">- 모든 브라우저에서 웹사이트에서 발생한 전환 추적</span><span class="se">\n</span><span class="dl">'</span> <span class="o">+</span>
        <span class="dl">'</span><span class="s1">- Google 애널리틱스를 비롯한 기타 외부 소스 (예: 고객 관계 관리(CRM) 시스템)의 전환 데이터를 Google Ads로 가져오기</span><span class="se">\n</span><span class="dl">'</span> <span class="o">+</span>
        <span class="dl">'</span><span class="s1">- Google Ads 캠페인 및 비용 데이터를 Google 애널리틱스 보고서로 가져오기</span><span class="se">\n</span><span class="dl">'</span> <span class="o">+</span>
        <span class="dl">'</span><span class="s1">- 이탈률, 평균 세션 시간 등의 Google 애널리틱스 사이트 참여 측정항목을 Google Ads 보고서로 가져오기</span><span class="se">\n</span><span class="dl">'</span>
    <span class="p">,</span>
		<span class="dl">"</span><span class="s2">question_correct</span><span class="dl">"</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">question_reference</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span>
            <span class="dl">"</span><span class="s2">title</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">구글 도움말</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">author</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Google</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">link</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">https://support.google.com/analytics/answer/6086075</span><span class="dl">"</span>
        <span class="p">}</span>
    <span class="p">],</span>
    <span class="dl">"</span><span class="s2">question_tag</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">GAIQ</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Google Analytics</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">소셜 미디어</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Google Ads 캠페인</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">검색 엔진 트래픽</span><span class="dl">"</span><span class="p">],</span>
    <span class="dl">"</span><span class="s2">question_create</span><span class="dl">"</span><span class="p">:</span> <span class="k">new</span> <span class="nc">Date</span><span class="p">(),</span>
    <span class="dl">"</span><span class="s2">question_edited</span><span class="dl">"</span><span class="p">:</span> <span class="k">new</span> <span class="nc">Date</span><span class="p">(),</span>
    <span class="dl">"</span><span class="s2">question_view</span><span class="dl">"</span><span class="p">:</span> <span class="mi">213</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>key : value 형태로 나타낸다.</li>
  <li>자바스크립트가 느슨한 타입의 언어이기 때문에 각 객체는 서로 다른 타입을 가지고 있어도 문제 없다.</li>
</ul>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 각 객체가 서로 같은 타입을 가지고 있는 경우</span>
<span class="p">{</span>
	<span class="dl">"</span><span class="s2">지브리OST리스트</span><span class="dl">"</span> <span class="p">:</span> <span class="p">[</span>
		<span class="p">{</span>
			<span class="dl">"</span><span class="s2">name</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">마녀 배달부 키키</span><span class="dl">"</span><span class="p">,</span>
			<span class="dl">"</span><span class="s2">song</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">따스함에 둘러 쌓인다면</span><span class="dl">"</span>
		<span class="p">},</span>
		<span class="p">{</span>
			<span class="dl">"</span><span class="s2">name</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">하울의 움직이는 성</span><span class="dl">"</span><span class="p">,</span>
			<span class="dl">"</span><span class="s2">song</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">세계의 약속</span><span class="dl">"</span>
		<span class="p">}</span>
	<span class="p">]</span>
<span class="p">}</span>

<span class="c1">// 각 객체가 서로 다른 타입을 가지고 있는 경우</span>
<span class="p">{</span>
	<span class="dl">"</span><span class="s2">지브리OST리스트</span><span class="dl">"</span> <span class="p">:</span> <span class="p">[</span>
		<span class="p">{</span>
			<span class="dl">"</span><span class="s2">name</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">마녀 배달부 키키</span><span class="dl">"</span><span class="p">,</span>
			<span class="dl">"</span><span class="s2">song</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">따스함에 둘러 쌓인다면</span><span class="dl">"</span>
		<span class="p">},</span>
		<span class="p">{</span>
			<span class="dl">"</span><span class="s2">name</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">하울의 움직이는 성</span><span class="dl">"</span><span class="p">,</span>
			<span class="dl">"</span><span class="s2">song</span><span class="dl">"</span> <span class="p">:</span> <span class="mi">1</span>
		<span class="p">}</span>
	<span class="p">]</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="json-참조-방법">JSON 참조 방법</h2>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">{</span>
	<span class="dl">"</span><span class="s2">지브리OST리스트</span><span class="dl">"</span> <span class="p">:</span> <span class="p">[</span>
		<span class="p">{</span>
			<span class="dl">"</span><span class="s2">name</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">마녀 배달부 키키</span><span class="dl">"</span><span class="p">,</span>
			<span class="dl">"</span><span class="s2">song</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">따스함에 둘러 쌓인다면</span><span class="dl">"</span>
		<span class="p">},</span>
		<span class="p">{</span>
			<span class="dl">"</span><span class="s2">name</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">하울의 움직이는 성</span><span class="dl">"</span><span class="p">,</span>
			<span class="dl">"</span><span class="s2">song</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">세계의 약속</span><span class="dl">"</span>
		<span class="p">}</span>
	<span class="p">]</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">지브리OST리스트</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">지브리OST리스트</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">name</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">지브리OST리스트</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="dl">"</span><span class="s2">song</span><span class="dl">"</span><span class="p">])</span>
</code></pre></div></div>

<ul>
  <li>앞의 코드처럼 배열은 [0], [1] 으로 배열의 index 값에 접근하면 되고, 해당 key에 대한 value는 .key 또는 [”key”]</li>
</ul>

<h2 id="json-주의할점">JSON 주의할점</h2>

<ul>
  <li>JSON은 순수한 데이터 포맷이다.</li>
  <li>오직 key - value 들만 담을 수 있다.</li>
  <li>메서드는 담을 수 없다.</li>
  <li>작은 따옴표가 아닌 큰 따옴표만을 사용해야 한다.</li>
  <li>undefined는 불가하다.</li>
</ul>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
	<span class="dl">"</span><span class="s2">지브리OST리스트</span><span class="dl">"</span> <span class="p">:</span> <span class="p">[</span>
		<span class="p">{</span>
			<span class="dl">'</span><span class="s1">name</span><span class="dl">'</span> <span class="p">:</span> <span class="kc">undefined</span><span class="p">,</span> <span class="c1">// X</span>
			<span class="dl">"</span><span class="s2">song</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">따스함에 둘러 쌓인다면</span><span class="dl">"</span>
		<span class="p">},</span>
		<span class="p">{</span>
			<span class="dl">"</span><span class="s2">name</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">하울의 움직이는 성</span><span class="dl">"</span><span class="p">,</span>
			<span class="dl">"</span><span class="s2">song</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">세계의 약속</span><span class="dl">"</span>
		<span class="p">}</span>
	<span class="p">]</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="json의-자료형">JSON의 자료형</h3>

<ul>
  <li>자바스크립트와 유사하지만 undefined, 메서드 등을 포함하지는 않는다.
    <ul>
      <li>수 (Number)</li>
      <li>문자열 (String)</li>
      <li>참 / 거짓 (Boolean)</li>
      <li>배열 (Array)</li>
      <li>객체 (Object)</li>
      <li>null</li>
    </ul>
  </li>
</ul>

<h3 id="json의-장점">JSON의 장점</h3>

<ul>
  <li>JSON은 텍스트로 이루어져 있으므로, 사람과 컴퓨터 모두 읽고 쓰기가 쉽다.</li>
  <li>프로그래밍 언어와 플랫폼에 독립적이므로, <strong>서로 다른 시스템간에 객체를 교환하기에 좋다.</strong></li>
  <li>주로 API, config 파일에 활용되며 읽고 쓰며 가볍다.</li>
</ul>

<hr />

<h1 id="2xml">#2.XML</h1>

<h3 id="데이터-비교">데이터 비교</h3>

<p>JSON</p>

<div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
	<span class="dl">"</span><span class="s2">CSKnowledgeList</span><span class="dl">"</span> <span class="p">:</span> <span class="p">[</span>
		<span class="p">{</span>
			<span class="dl">"</span><span class="s2">name</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">디자인패턴</span><span class="dl">"</span><span class="p">,</span>
			<span class="dl">"</span><span class="s2">difficult</span><span class="dl">"</span> <span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
		<span class="p">},</span>
		<span class="p">{</span>
			<span class="dl">"</span><span class="s2">name</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">네트워크</span><span class="dl">"</span><span class="p">,</span>
			<span class="dl">"</span><span class="s2">difficult</span><span class="dl">"</span> <span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
		<span class="p">}</span>
	<span class="p">]</span>
<span class="p">}</span>
</code></pre></div></div>

<p>XML</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;CSKnowledgeList&gt;</span>
	<span class="nt">&lt;CS&gt;</span>
		<span class="nt">&lt;name&gt;</span>디자인패턴<span class="nt">&lt;/name&gt;</span> <span class="nt">&lt;difficult&gt;</span>5<span class="nt">&lt;/difficult&gt;</span>
	<span class="nt">&lt;/CS&gt;</span>
	<span class="nt">&lt;CS&gt;</span>
		<span class="nt">&lt;name&gt;</span>네트워크<span class="nt">&lt;/name&gt;</span> <span class="nt">&lt;difficult&gt;</span>4<span class="nt">&lt;/difficult&gt;</span>
	<span class="nt">&lt;/CS&gt;</span>
<span class="nt">&lt;/CSKnowledgeList&gt;</span>
</code></pre></div></div>

<ul>
  <li>위는 JSON이고, 아래가 XML(Extensible Markup Language)이다. 이런식으로 중괄호가 아니라 열린 태그 닫힌 태그로 이루어진 구조의 데이터를 의미한다.</li>
  <li>xml 옆에 version을 쓰고 encoding을 쓴다. 보통은 utf-8이며 이 한 줄을 프롤로그라고 한다.</li>
  <li>CSKnowledgeList라는 태그로 감싸져있는데 이러한 최상위태그는 하나만 사용이 가능하다.</li>
  <li>JSON과 비교했을 때 닫힌 태그가 계속해서 들어가기 때문에 JSON과 비교하면 무겁다. 또한 Javascript Object로 변환하기 위해서 JSON보다는 더 많은 노력이 필요하다. (JSON은 JSON.parse 면 변환가능)</li>
</ul>

<p>html과 비교를 하기도 하는데 html의 태그는 정해져있다. body, p, div 등으로 말이다. 그러나 xml에는 기존 제공 이름이 없다.</p>

<p>대표적인 사용사례 sitemap.xml</p>

<ul>
  <li>xml은 대표적으로 sitemap.xml에 쓰인다.</li>
  <li>매우 큰 사이트의 경우 크기로 인해 Google 웹 크롤러가 신규 또는 최근에 업데이트된 페이지를 지나칠 수 있고, 서로 링크가 종속적으로 연결되지 않은 경우 Google이 일부 페이지를 누락하는 일이 있는데 이를 sitemap.xml이 방지한다.</li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;urlset</span> <span class="na">xmlns=</span><span class="s">"http://www.sitemaps.org/schemas/sitemap/0.9"</span><span class="err">?</span><span class="nt">&gt;</span>
	<span class="nt">&lt;url&gt;</span>
		<span class="nt">&lt;loc&gt;</span>http://www.example.com/foo.html<span class="nt">&lt;/loc&gt;</span>
		<span class="nt">&lt;lastmod&gt;</span>2018-06-04<span class="nt">&lt;/lastmod&gt;</span>
	<span class="nt">&lt;/url&gt;</span>
	<span class="nt">&lt;url&gt;</span>
		<span class="nt">&lt;loc&gt;</span>http://www.example.com/abc.html<span class="nt">&lt;/loc&gt;</span>
		<span class="nt">&lt;lastmod&gt;</span>2018-06-04<span class="nt">&lt;/lastmod&gt;</span>
	<span class="nt">&lt;/url&gt;</span>
<span class="nt">&lt;/urlset&gt;</span>
</code></pre></div></div>]]></content><author><name>Seobisback</name></author><category term="Syntax" /><category term="JSON" /><category term="XML" /><summary type="html"><![CDATA[데이터 - 이론을 세우는 데 기초가 되는 사실, 또는 바탕이 되는 자료나 관찰이나 실험, 조사로 얻은 사실이나 자료 등을 의미]]></summary></entry><entry><title type="html">클라우드, SaaS, IaaS, PasS</title><link href="http://localhost:4000/syntax/2023/04/13/Cloud-SaaS-IaaS-PaaS.html" rel="alternate" type="text/html" title="클라우드, SaaS, IaaS, PasS" /><published>2023-04-13T00:00:00+09:00</published><updated>2023-04-13T00:00:00+09:00</updated><id>http://localhost:4000/syntax/2023/04/13/Cloud-SaaS-IaaS-PaaS</id><content type="html" xml:base="http://localhost:4000/syntax/2023/04/13/Cloud-SaaS-IaaS-PaaS.html"><![CDATA[<h1 id="클라우드cloud">클라우드(Cloud)</h1>

<ul>
  <li>인터넷을 통해 접근할 수 있는 서버 그리고 그 안에서 구동되는 소프트웨어, 데이터베이스 등을 의미함.</li>
</ul>

<p><img src="/assets/images/posts/2023-04-13-Cloud-SaaS-IaaS-PaaS/cloud01.png" alt="cloud_01" /></p>

<ul>
  <li>내 컴퓨터 장비를 사용하지 않고 컴퓨터 장비를 구축해 해야할 작업을 온라인에 분산되어 존재하는 데이터 센터(Data Center, 이하 클라우드)에 맡겨 수행하는 것을 말한다. 이렇게 되면 서버를 직접 구매할 때 고려해야 할 전력, 위치, 서버 세팅, 확장성을 고민하지 않고 서비스 운영에만 집중할 수 있다. 이를 오프프레미스(off-premise) 방식이라고 한다.</li>
</ul>

<p><img src="/assets/images/posts/2023-04-13-Cloud-SaaS-IaaS-PaaS/cloud01.png" alt="cloud_02" /></p>

<h1 id="saas">SaaS</h1>

<ul>
  <li>SaaS(Software as a Service)는 인터넷을 통해 소프트웨어를 제공하는 방법이다. 완제품, 구글 드라이브, N드라이브, 구글 DOCS 등</li>
</ul>

<h1 id="iaas">IaaS</h1>

<ul>
  <li>IasS(Infrastructure-as-a-Service), 인프라를 제공 (서버와 저장소를 제공) 빈 방을 주는 것, 가상머신 위에서 애플리케이션의 각 컴포넌트가 구동된다. 특정 클라우드에 종속 x, 운영비가 상승한다. 이식성이 좋다. AWS의 EC2, NCP 등이 있다.</li>
  <li>가상 머신 : 가상 컴퓨터, 컴퓨터 시스템을 에뮬레이션(가상현실화) 하는 소프트웨어</li>
</ul>

<h1 id="pass">PasS</h1>

<ul>
  <li>PasS(Platform-as-a-Service) 는 플랫폼을 제공한다.</li>
  <li>플랫폼을 제공, 빌트인 방. 운영비는 절감할 수 있고, 모니터링, CI/CD가 제공된다. 그러나 IaaS 보다는 유연하지 않고 플랫폼에 종속되게 되어있다. heroku 등이 있다.</li>
</ul>]]></content><author><name>Seobisback</name></author><category term="Syntax" /><category term="Cloud" /><category term="SaaS" /><category term="IaaS" /><category term="PasS" /><summary type="html"><![CDATA[클라우드(Cloud)]]></summary></entry></feed>